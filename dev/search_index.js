var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"Author = \"Jakob Assländer\"\nCurrentModule = MRIgeneralizedBloch","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"In the following, you find the documentation of all exported functions of the MRIgeneralizedBloch.jl package:","category":"page"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [MRIgeneralizedBloch]","category":"page"},{"location":"api/#MRIgeneralizedBloch.apply_hamiltonian_gbloch!-Tuple{Any, Any, Any, NTuple{10, Any}, Any}","page":"API","title":"MRIgeneralizedBloch.apply_hamiltonian_gbloch!","text":"apply_hamiltonian_gbloch!(∂m∂t, m, mfun, p, t)\n\nApply the generalized Bloch Hamiltonian to m and write the resulting derivative wrt. time into ∂m∂t.\n\nArguemnts\n\n∂m∂t::Vector{<:Number}: Vector describing to derivative of m wrt. time; this vector has to be of the same size as m, but can contain any value, which is replaced by H * m\nm::Vector{<:Number}: Vector the spin ensemble state of the form [xf, yf, zf, zs, 1] if now gradient is calculated or of the form [xf, yf, zf, zs, 1, ∂xf/∂θ1, ∂yf/∂θ1, ∂zf/∂θ1, ∂zs/∂θ1, 0, ..., ∂xf/∂θn, ∂yf/∂θn, ∂zf/∂θn, ∂zs/∂θn, 0] if n derivatives wrt. θn are calculated\nmfun: History fuction; can be initialized with mfun(p, t; idxs=nothing) = typeof(idxs) <: Number ? 0.0 : zeros(5n + 5) for n gradients, and is then updated by the delay differential equation solvers\np::NTuple{9,10, or 11, Any}: (ω1, B1, ω0, m0s, R1, R2f, T2s, Rx, g), with    -ω1::Number: Rabi frequency in rad/s (rotation about the y-axis)   -B1::Number: B1 scaling normalized so that B1=1 corresponds to a perfectly calibrated RF field   -ω0::Number: Larmor or off-resonance frequency in rad/s   -m0s::Number: Fractional semi-solid spin pool size in the range of 0 to 1   -R1::Number: Apparent longitudinal spin relaxation rate of both pools in 1/seconds   -R2f::Number: Trasversal spin relaxation rate of the free pool in 1/seconds   -T2s::Number: Trasversal spin relaxation time of the semi-solid pool in seconds   -Rx::Number: Exchange rate between the two pools in 1/seconds   -g::Function: Green's function of the form G(κ) = G((t-τ)/T2s)   or (ω1, B1, ω0, m0s, R1, R2f, T2s, Rx, zs_idx, g) with\nzs_idx::Integer: Index to be used history function to be used in the Green's function; Default is 4 (zs), and for derivatives 9, 14, ... are used\nor (ω1, B1, ω0, m0s, R1, R2f, T2s, Rx, g, dG_o_dT2s_x_T2s, grad_list) with\ndG_o_dT2s_x_T2s::Function: Derivative of the Green's function wrt. T2s, multiplied by T2s; of the form dG_o_dT2s_x_T2s(κ) = dG_o_dT2s_x_T2s((t-τ)/T2s)\ngrad_list::Vector{<:grad_param}: List of gradients to be calucualted; any subset of [grad_m0s(), grad_R1(), grad_R2f(), grad_Rx(), grad_T2s(), grad_ω0(), grad_B1()]; length of the vector must be n (cf. arguments m and ∂m∂t)\nt::Number: Time in seconds\n\nOptional:\n\npulsetype=:normal: Use default for a regular RF-pulse; the option pulsetype=:inversion should be handled with care as it is only inteded to calculate the saturation of the semi-solid pool and its derivative. \n\nExamples\n\njulia> using DifferentialEquations\n\njulia> α = π/2;\n\njulia> TRF = 100e-6;\n\njulia> ω1 = α/TRF;\n\njulia> B1 = 1;\n\njulia> ω0 = 0;\n\njulia> m0s = 0.1;\n\njulia> R1 = 1;\n\njulia> R2f = 15;\n\njulia> T2s = 10e-6;\n\njulia> Rx = 30;\n\njulia> G = interpolate_greens_function(greens_superlorentzian, 0, TRF / T2s);\n\n\njulia> m0 = [0; 0; 1-m0s; m0s; 1];\n\njulia> mfun(p, t; idxs=nothing) = typeof(idxs) <: Number ? 0.0 : zeros(5);\n\njulia> sol = solve(DDEProblem(apply_hamiltonian_gbloch!, m0, mfun, (0, TRF), (ω1, B1, ω0, m0s, R1, R2f, T2s, Rx, G)))\nretcode: Success\nInterpolation: automatic order switching interpolation\nt: 9-element Vector{Float64}:\n 0.0\n 1.220281289257312e-7\n 1.342309418183043e-6\n 7.538223396809993e-6\n 2.0264275992449307e-5\n 3.806391790996879e-5\n 6.131350253044042e-5\n 8.985713095394202e-5\n 0.0001\nu: 9-element Vector{Vector{Float64}}:\n [0.0, 0.0, 0.9, 0.1, 1.0]\n [0.0017251293948764095, 0.0, 0.8999983466235149, 0.0999998162918461, 1.0]\n [0.018974855260649, 0.0, 0.8997999500976795, 0.0999777787537773, 1.0]\n [0.10631425327309292, 0.0, 0.8936981899494069, 0.0993062488692229, 1.0]\n [0.28162336805181576, 0.0, 0.8547938784075204, 0.09527129619977613, 1.0]\n [0.5064779297334128, 0.0, 0.7438963250738748, 0.08537276746991054, 1.0]\n [0.7385374607670901, 0.0, 0.5140010917423798, 0.06896091618108181, 1.0]\n [0.888016931522836, 0.0, 0.14315426117917585, 0.04808883373953286, 1.0]\n [0.899347249517465, 0.0, 0.00048588799488130663, 0.04106861705554077, 1.0]\n\njulia> using Plots\n\njulia> plot(sol, labels=[\"xf\" \"yf\" \"zf\" \"zs\" \"1\"], xlabel=\"t (s)\", ylabel=\"m(t)\");\n\n\njulia> dG_o_dT2s_x_T2s = interpolate_greens_function(dG_o_dT2s_x_T2s_superlorentzian, 0, TRF / T2s);\n\n\njulia> grad_list = [grad_R2f(), grad_m0s()];\n\n\njulia> m0 = [0; 0; 1-m0s; m0s; 1; zeros(5*length(grad_list))];\n\n\njulia> mfun(p, t; idxs=nothing) = typeof(idxs) <: Number ? 0.0 : zeros(5 + 5*length(grad_list));\n\njulia> sol = solve(DDEProblem(apply_hamiltonian_gbloch!, m0, mfun, (0, TRF), (ω1, B1, ω0, m0s, R1, R2f, T2s, Rx, G, dG_o_dT2s_x_T2s, grad_list)));\n\n\njulia> plot(sol);\n\n\n\n\n\n","category":"method"},{"location":"api/#MRIgeneralizedBloch.apply_hamiltonian_sled!-Tuple{Any, Any, NTuple{6, Any}, Any}","page":"API","title":"MRIgeneralizedBloch.apply_hamiltonian_sled!","text":"apply_hamiltonian_sled!(∂m∂t, m, p, t)\n\nApply Sled's Hamiltonian to m and write the resulting derivative wrt. time into ∂m∂t.\n\nArguemnts\n\n∂m∂t::Vector{<:Number}: Vector of length 1 describing to derivative of m wrt. time; this vector can contain any value, which is replaced by H * m\nm::Vector{<:Number}: Vector of length 1 describing the zs magnetization\np::NTuple{6 or 9, Any}: (ω1, B1, ω0, R1, T2s, g) for a simulating an isolated semi-solid pool or (ω1, B1, ω0, m0s, R1, R2f, T2s, Rx, g) for simulating a coupled spin system; with    -ω1::Number: Rabi frequency in rad/s (rotation about the y-axis)   -B1::Number: B1 scaling normalized so that B1=1 corresponds to a perfectly calibrated RF field   -ω0::Number: Larmor or off-resonance frequency in rad/s   -R1::Number: Longitudinal spin relaxation rate in 1/seconds   -R2f::Number: Trasversal spin relaxation rate of the free pool in 1/seconds   -T2s::Number: Trasversal spin relaxation time in seconds   -Rx::Number: Exchange rate between the two pools in 1/seconds   -g::Function: Green's function of the form G(κ) = G((t-τ)/T2s)\nt::Number: Time in seconds\n\nExamples\n\njulia> using DifferentialEquations\n\njulia> α = π/2;\n\njulia> TRF = 100e-6;\n\njulia> ω1 = α/TRF;\n\njulia> B1 = 1;\n\njulia> ω0 = 0;\n\njulia> R1 = 1;\n\njulia> T2s = 10e-6;\n\njulia> G = interpolate_greens_function(greens_superlorentzian, 0, TRF / T2s);\n\njulia> m0 = [1];\n\njulia> sol = solve(ODEProblem(apply_hamiltonian_sled!, m0, (0, TRF), (ω1, 1, ω0, R1, T2s, G)), Tsit5())\nretcode: Success\nInterpolation: specialized 4th order \"free\" interpolation\nt: 3-element Vector{Float64}:\n 0.0\n 7.475658194333419e-5\n 0.0001\nu: 3-element Vector{Vector{Float64}}:\n [1.0]\n [0.6313685535188782]\n [0.48951919836592006]\n\njulia> using Plots\n\njulia> plot(sol, labels=[\"zs\"], xlabel=\"t (s)\", ylabel=\"m(t)\");\n\n\n\n\n\n\n","category":"method"},{"location":"api/#MRIgeneralizedBloch.calculatesignal_gbloch_ide-NTuple{10, Any}","page":"API","title":"MRIgeneralizedBloch.calculatesignal_gbloch_ide","text":"calculatesignal_gbloch_ide(α, TRF, TR, ω0, B1, m0s, R1, R2f, Rx, T2s[; grad_list, Ncyc=2, output=:complexsignal])\n\nCalculate the signal or magnetixation evolution with the full generalized Bloch model assuming a super-Lorentzian lineshape (slow).\n\nThe simulation assumes a sequence of rectangluar RF-pulses with varying flip angles α and RF-pulse durations TRF, but a fixed repetition time TR. Further, it assumes balanced gradient moments. \n\nArguemnts\n\nα::Vector{<:Number}: Array of flip angles in radians\nTRF::Vector{<:Number}: Array of the RF-pulse durations in seconds\nTR::Number: Repetition time in seconds\nω0::Number: Off-resonance frequency in rad/s \nB1::Number: Normalized transmit B1 field, i.e. B1 = 1 corresponds to a well-calibrated B1 field\nm0s::Number: Fractional size of the semi-solid pool; should be in range of 0 to 1\nR1::Number: Apparent longitudinal relaxation rate of the free and semi-solid pool in 1/seconds\nR2f::Number: Transversal relaxation rate of the free pool in 1/seconds\nRx::Number: Exchange rate between the two spin pools in 1/seconds\nT2s::Number: Transversal relaxationt time of the semi-solid pool in seconds\n\nOptional:\n\ngrad_list=[]: Vector to indicate which gradients should be calculated; the vector can either be empty [] for no gradient, or contain any subset/order of grad_list=[grad_m0s(), grad_R1(), grad_R2f(), grad_Rx(), grad_T2s(), grad_ω0(), grad_B1()]\nNcyc=2: The magnetization is initialized with thermal equilibrium and then performed Ncyc times and only the last cycle is stored. The default value is usually a good approximation for antiperiodic boundary conditions. Increase the number for higher precision at the cost of computation time. \noutput=:complexsignal: The defaul keywords triggers the function to output a complex-valued signal (xf + 1im yf); the keyword output=:realmagnetization triggers an output of the entire (real valued) vector [xf, yf, zf, xs, zs]\ngreens=(greens_superlorentzian, dG_o_dT2s_x_T2s_superlorentzian): Tuple of a Greens function G(κ) = G((t-τ)/T2s) and its partial derivative wrt. T2s, multiplied by T2s ∂G((t-τ)/T2s)/∂T2s * T2s. This package supplies the three Greens functions greens=(greens_superlorentzian, dG_o_dT2s_x_T2s_superlorentzian) (default), greens=(greens_lorentzian, dG_o_dT2s_x_T2s_lorentzian), and greens=(greens_gaussian, dG_o_dT2s_x_T2s_gaussian)\n\nExamples\n\njulia> calculatesignal_gbloch_ide(ones(100)*π/2, ones(100)*5e-4, 4e-3, 0, 1, 0.1, 1, 15, 30, 10e-6)\n100×1 Matrix{ComplexF64}:\n -0.024657762441422027 + 0.0im\n 0.0037348678313655435 - 0.0im\n -0.019057736703007047 + 0.0im\n  0.007146413346758778 - 0.0im\n -0.013913423956595785 + 0.0im\n  0.010291046549792265 - 0.0im\n -0.009153866378612775 + 0.0im\n  0.013213045210360654 - 0.0im\n -0.004734258510785772 + 0.0im\n   0.01593906991792929 - 0.0im\n                       ⋮\n   0.05321851165156517 - 0.0im\n   0.05261662009092025 + 0.0im\n  0.053387874462524944 - 0.0im\n  0.052832959843114265 + 0.0im\n   0.05354631440847341 - 0.0im\n  0.053034722397620235 + 0.0im\n   0.05369453263373485 - 0.0im\n   0.05322289238188484 + 0.0im\n   0.05383318553569216 - 0.0im\n\njulia> calculatesignal_gbloch_ide(ones(100)*π/2, ones(100)*5e-4, 4e-3, 0, 1, 0.1, 1, 15, 30, 10e-6; grad_list=[grad_R1(), grad_T2s()], output=:realmagnetization)\n100×15 transpose(::Matrix{Float64}) with eltype Float64:\n -0.0246575    0.0   0.00191834  …   0.0    -8.09518  -146.358   0.0\n  0.00373479  -0.0  -0.0217727      -0.0    83.521    -135.807   0.0\n -0.0190576    0.0   0.00549726      0.0   -21.4616   -119.477   0.0\n  0.00714631  -0.0  -0.0164074      -0.0    64.4139   -106.11    0.0\n -0.0139133    0.0   0.0087715       0.0   -30.9968    -92.3956  0.0\n  0.0102909   -0.0  -0.0114604   …  -0.0    49.4596    -83.7202  0.0\n -0.00915379   0.0   0.0118022       0.0   -37.5344    -75.2901  0.0\n  0.0132129   -0.0  -0.00687472     -0.0    37.423     -71.2706  0.0\n -0.00473424   0.0   0.0146242       0.0   -42.288     -66.9254  0.0\n  0.0159389   -0.0  -0.00261256     -0.0    27.1804    -66.0774  0.0\n  ⋮                              ⋱\n  0.0532167   -0.0   0.0525262      -0.0  -206.85     -155.403   0.0\n  0.0526148    0.0   0.0533279       0.0  -210.517    -155.62    0.0\n  0.053386    -0.0   0.0527502      -0.0  -209.167    -155.899   0.0\n  0.0528312    0.0   0.0534917       0.0  -212.584    -156.103   0.0\n  0.0535445   -0.0   0.052959    …  -0.0  -211.372    -156.364   0.0\n  0.0530329    0.0   0.0536449       0.0  -214.557    -156.555   0.0\n  0.0536927   -0.0   0.0531539      -0.0  -213.471    -156.799   0.0\n  0.053221     0.0   0.0537883       0.0  -216.439    -156.979   0.0\n  0.0538313   -0.0   0.0533355      -0.0  -215.468    -157.207   0.0\n\n\n\n\n\n","category":"method"},{"location":"api/#MRIgeneralizedBloch.calculatesignal_graham_ode-NTuple{10, Any}","page":"API","title":"MRIgeneralizedBloch.calculatesignal_graham_ode","text":"calculatesignal_graham_ode(α, TRF, TR, ω0, B1, m0s, R1, R2f, Rx, T2s[; grad_list, Ncyc=2, output=:complexsignal])\n\nCalculate the signal or magnetixation evolution with Graham's spectral model assuming a super-Lorentzian lineshape.\n\nThe simulation assumes a sequence of rectangluar RF-pulses with varying flip angles α and RF-pulse durations TRF, but a fixed repetition time TR. Further, it assumes balanced gradient moments. \n\nArguemnts\n\nα::Vector{<:Number}: Array of flip angles in radians\nTRF::Vector{<:Number}: Array of the RF-pulse durations in seconds\nTR::Number: Repetition time in seconds\nω0::Number: Off-resonance frequency in rad/s \nB1::Number: Normalized transmit B1 field, i.e. B1 = 1 corresponds to a well-calibrated B1 field\nm0s::Number: Fractional size of the semi-solid pool; should be in range of 0 to 1\nR1::Number: Apparent longitudinal relaxation rate of the free and semi-solid pool in 1/seconds\nR2f::Number: Transversal relaxation rate of the free pool in 1/seconds\nRx::Number: Exchange rate between the two spin pools in 1/seconds\nT2s::Number: Transversal relaxationt time of the semi-solid pool in seconds\n\nOptional:\n\ngrad_list=[]: Vector to indicate which gradients should be calculated; the vector can either be empty [] for no gradient, or contain any subset/order of grad_list=[grad_m0s(), grad_R1(), grad_R2f(), grad_Rx(), grad_T2s(), grad_ω0(), grad_B1()]\nNcyc=2: The magnetization is initialized with thermal equilibrium and then performed Ncyc times and only the last cycle is stored. The default value is usually a good approximation for antiperiodic boundary conditions. Increase the number for higher precision at the cost of computation time. \noutput=:complexsignal: The defaul keywords triggers the function to output a complex-valued signal (xf + 1im yf); the keyword output=:realmagnetization triggers an output of the entire (real valued) vector [xf, yf, zf, xs, zs]\n\nExamples\n\njulia> calculatesignal_graham_ode(ones(100)*π/2, ones(100)*5e-4, 4e-3, 0, 1, 0.1, 1, 15, 30, 10e-6)\n100×1 Matrix{ComplexF64}:\n  -0.02507016283364451 + 0.0im\n 0.0037430687099323156 - 0.0im\n  -0.01943221197276058 + 0.0im\n  0.007158922245383863 - 0.0im\n -0.014255325151363943 + 0.0im\n  0.010307593338620509 - 0.0im\n -0.009486903618758917 + 0.0im\n  0.013252701136887458 - 0.0im\n -0.005050073780485204 + 0.0im\n  0.015978096974037494 - 0.0im\n                       ⋮\n   0.05452107922170709 - 0.0im\n   0.05378824747234005 + 0.0im\n  0.054667746773539264 - 0.0im\n   0.05399168955011588 + 0.0im\n   0.05480524072601236 - 0.0im\n   0.05418157100953124 + 0.0im\n   0.05493412868432558 - 0.0im\n   0.05435879806126502 + 0.0im\n  0.055054944205797034 - 0.0im\n\njulia> calculatesignal_graham_ode(ones(100)*π/2, ones(100)*5e-4, 4e-3, 0, 1, 0.1, 1, 15, 30, 10e-6; grad_list=[grad_R1(), grad_T2s()], output=:realmagnetization)\n100×15 transpose(::Matrix{Float64}) with eltype Float64:\n -0.0249614    0.0   0.00192295  …   0.0    -7.79895  -141.002   0.0\n  0.00374263  -0.0  -0.0220613      -0.0    81.4297   -131.309   0.0\n -0.0193318    0.0   0.00550778      0.0   -20.7551   -116.146   0.0\n  0.00715882  -0.0  -0.0166685      -0.0    62.8368   -103.541   0.0\n -0.014162     0.0   0.00878636      0.0   -30.0836    -90.4788  0.0\n  0.010306    -0.0  -0.0117047   …  -0.0    48.2494    -81.8859  0.0\n -0.00938721   0.0   0.0118269       0.0   -36.5357    -73.5855  0.0\n  0.0132393   -0.0  -0.00710492     -0.0    36.5226    -69.4018  0.0\n -0.0049538    0.0   0.0146514       0.0   -41.1928    -65.1257  0.0\n  0.0159661   -0.0  -0.00282248     -0.0    26.5349    -64.1602  0.0\n  ⋮                              ⋱\n  0.0541053   -0.0   0.053379       -0.0  -202.073    -149.963   0.0\n  0.0535064    0.0   0.0541954       0.0  -205.711    -150.191   0.0\n  0.054291    -0.0   0.0536194      -0.0  -204.431    -150.476   0.0\n  0.0537389    0.0   0.054375        0.0  -207.825    -150.691   0.0\n  0.054465    -0.0   0.0538441   …  -0.0  -206.681    -150.958   0.0\n  0.0539561    0.0   0.0545433       0.0  -209.847    -151.16    0.0\n  0.0546281   -0.0   0.0540539      -0.0  -208.826    -151.411   0.0\n  0.054159     0.0   0.054701        0.0  -211.78     -151.601   0.0\n  0.0547809   -0.0   0.05425        -0.0  -210.87     -151.835   0.0\n\n\n\n\n\n","category":"method"},{"location":"api/#MRIgeneralizedBloch.calculatesignal_linearapprox-NTuple{11, Any}","page":"API","title":"MRIgeneralizedBloch.calculatesignal_linearapprox","text":"calculatesignal_linearapprox(α, TRF, TR, ω0, B1, m0s, R1, R2f, Rx, T2s, R2slT[; grad_list=[undef], rfphase_increment=[π], m0=:antiperiodic, output=:complexsignal])\n\nCalculate the signal or magnetization evolution with the linear approximation of the generalized Bloch model assuming a super-Loretzian lineshape. \n\nThe simulation assumes a sequence of rectangluar RF-pulses with varying flip angles α and RF-pulse durations TRF, but a fixed repetition time TR. Further, it assumes balanced gradient moments. \n\nArguemnts\n\nα::Vector{<:Number}: Array of flip angles in radians\nTRF::Vector{<:Number}: Array of the RF-pulse durations in seconds\nTR::Number: Repetition time in seconds\nω0::Number: Off-resonance frequency in rad/s \nB1::Number: Normalized transmit B1 field, i.e. B1 = 1 corresponds to a well-calibrated B1 field\nm0s::Number: Fractional size of the semi-solid pool; should be in range of 0 to 1\nR1::Number: Apparent longitudinal relaxation rate of the free and semi-solid pool in 1/seconds\nR2f::Number: Transversal relaxation rate of the free pool in 1/seconds\nRx::Number: Exchange rate between the two spin pools in 1/seconds\nT2s::Number: Transversal relaxationt time of the semi-solid pool in seconds\nR2slT::NTuple{3, Function}: Tuple of three functions: R2sl(TRF, ω1, B1, T2s), dR2sldB1(TRF, ω1, B1, T2s), and R2sldT2s(TRF, ω1, B1, T2s). Can be generated with precompute_R2sl\n\nOptional:\n\ngrad_list=[undef]: Vector to indicate which gradients should be calculated; the vector elements can either be undef for no gradient, or any subset/order of grad_list=[grad_m0s(), grad_R1(), grad_R2f(), grad_Rx(), grad_T2s(), grad_ω0(), grad_B1()]\nrfphase_increment=[π]::Vector{<:Number}: Increment of the RF phase between consequtive pulses. The default value π, together with ω0=0 corresponds to the on-resonance condition. When more than one value is supplied, their resulting signal is stored along the second dimension of the output array. \nm0=:antiperiodic: With the default keyword :antiperiodic, the signal and their derivatives are calcualted assuming m(0) = -m(T), where T is the duration of the RF-train. With the keyword :thermal, the magnetization m(0) is initialized with thermal equilibrium [xf, yf, zf, xs, zs] = [0, 0, 1-m0s, 0, m0s], followed by a α[1]/2 - TR/2 prep pulse; and with the keyword :IR, this initalization is followed an inversion pulse of duration TRF[1], (set α[1]=π) and a α[2]/2 - TR/2 prep pulse.\noutput=:complexsignal: The defaul keywords triggers the function to output a complex-valued signal (xf + 1im yf); the keyword output=:realmagnetization triggers an output of the entire (real valued) vector [xf, yf, zf, xs, zs]\n\nExamples\n\njulia> R2slT = precompute_R2sl(4e-4, 6e-4, 5e-6, 15e-6, 0, π, 0.9, 1.1);\n\n\njulia> calculatesignal_linearapprox(ones(100)*π/2, ones(100)*5e-4, 4e-3, 0, 1, 0.1, 1, 15, 30, 10e-6, R2slT)\n100×1×1 Array{ComplexF64, 3}:\n[:, :, 1] =\n  -0.02534278046134154 - 6.748418787451518e-18im\n  0.003747524854957436 + 3.4325653058017187e-18im\n   -0.0196833907083505 - 2.8004553842504324e-18im\n  0.007162011566093652 + 3.672271808540125e-19im\n -0.014489517679344808 + 4.801739729077009e-19im\n  0.010305804983291571 - 2.1233287976034503e-18im\n -0.009686634863202483 + 3.1882740494855564e-18im\n   0.01322536234967787 - 4.1197910372278614e-18im\n -0.005228086823125368 + 5.405192374297665e-18im\n  0.015948493046190188 - 5.693388849090533e-18im\n                       ⋮\n   0.05320472714326833 + 1.3125707519115202e-18im\n   0.05258500575198769 + 4.900122476070182e-18im\n  0.053374187025433915 + 1.4500192394684467e-18im\n   0.05280280912207337 + 4.790222663609598e-18im\n   0.05353272287002102 + 1.5786388776856578e-18im\n   0.05300592940528556 + 4.687377647481522e-18im\n   0.05368103548081201 + 1.6989211160502906e-18im\n   0.05319535891146354 + 4.591205423715975e-18im\n   0.05381978096985631 + 1.811340158316642e-18im\n\n\n\n\n\n","category":"method"},{"location":"api/#MRIgeneralizedBloch.dG_o_dT2s_x_T2s_gaussian-Tuple{Any}","page":"API","title":"MRIgeneralizedBloch.dG_o_dT2s_x_T2s_gaussian","text":"dG_o_dT2s_x_T2s_gaussian(κ)\n\nEvaluate the derivative of Green's function, corresponding to a Gaussian lineshape, wrt. T2s at κ = (t-τ)/T2s and multiply it by T2s.\n\nThe multiplication is added so that the function merely depends on κ = (t-τ)/T2s. The actual derivative is given by dG_o_dT2s_x_T2s_gaussian((t-τ)/T2s)/T2s.\n\nExamples\n\njulia> t = 100e-6;\n\njulia> τ = 0;\n\njulia> T2s = 10e-6;\n\njulia> dGdT2s = dG_o_dT2s_x_T2s_gaussian((t-τ)/T2s)/T2s\n1.9287498479639177e-15\n\n\n\n\n\n","category":"method"},{"location":"api/#MRIgeneralizedBloch.dG_o_dT2s_x_T2s_lorentzian-Tuple{Any}","page":"API","title":"MRIgeneralizedBloch.dG_o_dT2s_x_T2s_lorentzian","text":"dG_o_dT2s_x_T2s_lorentzian(κ)\n\nEvaluate the derivative of Green's function, corresponding to a Lorentzian lineshape, wrt. T2s at κ = (t-τ)/T2s and multiply it by T2s.\n\nThe multiplication is added so that the function merely depends on κ = (t-τ)/T2s. The actual derivative is given by dG_o_dT2s_x_T2s_lorentzian((t-τ)/T2s)/T2s.\n\nExamples\n\njulia> t = 100e-6;\n\njulia> τ = 0;\n\njulia> T2s = 10e-6;\n\njulia> dGdT2s = dG_o_dT2s_x_T2s_lorentzian((t-τ)/T2s)/T2s\n45.39992976248485\n\n\n\n\n\n","category":"method"},{"location":"api/#MRIgeneralizedBloch.dG_o_dT2s_x_T2s_superlorentzian-Tuple{Any}","page":"API","title":"MRIgeneralizedBloch.dG_o_dT2s_x_T2s_superlorentzian","text":"dG_o_dT2s_x_T2s_superlorentzian(κ)\n\nEvaluate the derivative of Green's function, corresponding to a super-Lorentzian lineshape, wrt. T2s at κ = (t-τ)/T2s and multiply it by T2s.\n\nThe multiplication is added so that the function merely depends on κ = (t-τ)/T2s. The actual derivative is given by dG_o_dT2s_x_T2s_superlorentzian((t-τ)/T2s)/T2s.\n\nExamples\n\njulia> t = 100e-6;\n\njulia> τ = 0;\n\njulia> T2s = 10e-6;\n\njulia> dGdT2s = dG_o_dT2s_x_T2s_superlorentzian((t-τ)/T2s)/T2s\n15253.095033670965\n\n\n\n\n\n","category":"method"},{"location":"api/#MRIgeneralizedBloch.greens_gaussian-Tuple{Any}","page":"API","title":"MRIgeneralizedBloch.greens_gaussian","text":"greens_gaussian(κ)\n\nEvaluate the Green's function corresponding to a Gaussian lineshape at κ = (t-τ)/T2s.\n\nExamples\n\njulia> t = 100e-6;\n\njulia> τ = 0;\n\njulia> T2s = 10e-6;\n\njulia> greens_gaussian((t-τ)/T2s)\n1.9287498479639178e-22\n\n\n\n\n\n","category":"method"},{"location":"api/#MRIgeneralizedBloch.greens_lorentzian-Tuple{Any}","page":"API","title":"MRIgeneralizedBloch.greens_lorentzian","text":"greens_lorentzian(κ)\n\nEvaluate the Green's function corresponding to a Lorentzian lineshape at κ = (t-τ)/T2s.\n\nExamples\n\njulia> t = 100e-6;\n\njulia> τ = 0;\n\njulia> T2s = 10e-6;\n\njulia> greens_lorentzian((t-τ)/T2s)\n4.5399929762484854e-5\n\n\n\n\n\n","category":"method"},{"location":"api/#MRIgeneralizedBloch.greens_superlorentzian-Tuple{Any}","page":"API","title":"MRIgeneralizedBloch.greens_superlorentzian","text":"greens_superlorentzian(κ)\n\nEvaluate the Green's function corresponding to a super-Lorentzian lineshape at κ = (t-τ)/T2s.\n\nExamples\n\njulia> t = 100e-6;\n\njulia> τ = 0;\n\njulia> T2s = 10e-6;\n\njulia> greens_superlorentzian((t-τ)/T2s)\n0.1471246868094442\n\n\n\n\n\n","category":"method"},{"location":"api/#MRIgeneralizedBloch.hamiltonian_linear-NTuple{9, Any}","page":"API","title":"MRIgeneralizedBloch.hamiltonian_linear","text":"hamiltonian_linear(ω1, B1, ω0, T, m0s, R1, R2f, Rx, R2s[, dR2sdT2s, dR2sdB1, grad_type])\n\nCalculate the hamiltonian of the linear approximation of the generalized Bloch model. \n\nIf no gradient is supplied, it returns a 6x6 (static) matrix with the dimensions (in this order) [xf, yf, zf, xs, zs, 1]; the attached 1 is a mathematical trick to allow for T_1 relaxation to a non-zero thermal equilibrium. If a gradient is supplied, it returns a 11x11 (static) matrix with the dimensions (in this order) [xf, yf, zf, xs, zs, dxf/dθ, dyf/dθ, dzf/dθ, dxs/dθ, dzs/dθ,  1], where θ is the parameter specified by grad_type\n\nArguemnts\n\nω1::Number: Rabi frequency in rad/s (rotation about the y-axis)\nB1::Number: Normalized transmit B1 field, i.e. B1 = 1 corresponds to a well-calibrated B1 field\nω0::Number: Larmor (or off-resonance) frequency in rad/s (rotation about the z-axis)\nT::Number: Time in seconds; this can, e.g., be the RF-pulse duration, or the time of free precession with ω1=0\nm0s::Number: Fractional size of the semi-solid pool; should be in range of 0 to 1\nR1::Number: Apparent longitudinal relaxation rate of the free and semi-solid pool in 1/seconds\nR2f::Number: Transversal relaxation rate of the free pool in 1/seconds\nRx::Number: Exchange rate between the two spin pools in 1/seconds\nR2s::Number: Transversal relaxationt rate of the semi-solid pool in 1/seconds; this number can be calcualated with the first function returned by precompute_R2sl to implement the linear approximation described in the generalized Bloch paper\n\nOptional:\n\ndR2sdT2s::Number: Derivative of linearized R2sl wrt. the actual T2s; only required if grad_type = grad_T2s(); this number can be calcualated with the second function returned by precompute_R2sl\ndR2sdB1::Number: Derivative of linearized R2sl wrt. B1; only required if grad_type = grad_B1(); this number can be calcualated with the third function returned by precompute_R2sl\ngrad_type::grad_param: grad_m0s(), grad_R1(), grad_R2f(), grad_Rx(), grad_T2s(), grad_ω0(), or grad_B1(); create one hamiltonian for each desired gradient\n\nExamples\n\njulia> α = π;\n\njulia> T = 500e-6;\n\njulia> ω1 = α/T;\n\njulia> B1 = 1;\n\njulia> ω0 = 0;\n\njulia> m0s = 0.1;\n\njulia> R1 = 1;\n\njulia> R2f = 15;\n\njulia> Rx = 30;\n\njulia> R2s = 1e5;\n\njulia> m0 = [0, 0, 1-m0s, 0, m0s, 1];\n\njulia> (xf, yf, zf, xs, zs, _) = exp(hamiltonian_linear(ω1, B1, ω0, T, m0s, R1, R2f, Rx, R2s)) * m0\n6-element StaticArrays.SVector{6, Float64} with indices SOneTo(6):\n  0.0010646925712316103\n  0.0\n -0.8957848933541458\n  0.005125086137871529\n  0.08119617921987109\n  1.0\n\n\n\n\n\n","category":"method"},{"location":"api/#MRIgeneralizedBloch.interpolate_greens_function-Tuple{Any, Any, Any}","page":"API","title":"MRIgeneralizedBloch.interpolate_greens_function","text":"interpolate_greens_function(f, κmin, κmax)\n\nInterpolate the Green's function f in the range between κmin and κmax.\n\nThe interpolation uses the ApproxFun.jl package that incorporates Chebyshev polynomials and ensures an approximation to machine precision. \n\nExamples\n\njulia> t = 100e-6;\n\njulia> τ = 0;\n\njulia> T2s = 10e-6;\n\njulia> greens_superlorentzian((t-τ)/T2s)\n0.1471246868094442\n\njulia> Gint = interpolate_greens_function(greens_superlorentzian, 0, 20);\n\n\njulia> Gint((t-τ)/T2s)\n0.14712468680944407\n\n\n\n\n\n","category":"method"},{"location":"api/#MRIgeneralizedBloch.precompute_R2sl-NTuple{8, Any}","page":"API","title":"MRIgeneralizedBloch.precompute_R2sl","text":"precompute_R2sl(TRF_min, TRF_max, T2s_min, T2s_max, α_min, α_max, B1_min, B1_max[; greens=greens_superlorentzian])\n\nPre-compute and interpolate the linearized R2sl(TRF, α, B1, T2s) and its derivatives dR2sldB1(TRF, α, B1, T2s) and R2sldT2s(TRF, α, B1, T2s) in the range specified by the arguments.\n\nThe function solves the generalized Bloch equations of an isolated semi-solid pool for values in the specified range, calulates the linearized R2sl that minimizes the error of zs at the end of the RF-pulse, and interpolates between the different samples. \n\nArguemnts\n\nTRF_min::Number: lower bound of the RF-pulse duration range in seconds\nTRF_max::Number: upper bound of the RF-pulse duration range in seconds\nT2s_min::Number: lower bound of the T2s range in seconds\nT2s_max::Number: upper bound of the T2s range in seconds\nα_min::Number: lower bound of the flip angle range in radians\nα_max::Number: upper bound of the flip angle range in radians\nB1_min::Number: lower bound of the B1 range, normalized so that B1 = 1 corresponds to a perfectly calibrated RF field\nB1_max::Number: upper bound of the B1 range, normalized so that B1 = 1 corresponds to a perfectly calibrated RF field\n\nOptional:\n\ngreens=greens_superlorentzian: Greens function in the form G(κ) = G((t-τ)/T2s). This package supplies the three Greens functions greens=greens_superlorentzian (default), greens=greens_lorentzian, and greens=greens_gaussian\n\nExamples\n\njulia> (R2sl, dR2sldB1, R2sldT2s) = precompute_R2sl(100e-6, 1e-3, 5e-6, 15e-6, 0, π, 0.7, 1.3);\n\n\njulia> (R2sl, dR2sldB1, R2sldT2s) = precompute_R2sl(100e-6, 1e-3, 5e-6, 15e-6, 0, π, 0.7, 1.3; greens=greens_gaussian);\n\n\n\n\n\n\n","category":"method"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"EditURL = \"https://github.com/JakobAsslaender/MRIgeneralizedBloch.jl/blob/master/docs/src/Linear_Approximation.jl\"","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"(Image: )","category":"page"},{"location":"build_literate/Linear_Approximation/#Linear-Approximation","page":"Linear Approximation","title":"Linear Approximation","text":"","category":"section"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"The following code demonstrates the linear approximation of the generalized Bloch model and replicates Figs. 7 and 8 in the paper.","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"For this analysis we need the following packages:","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"using DifferentialEquations\nusing BenchmarkTools\nusing LinearAlgebra\nusing MRIgeneralizedBloch\nusing Plots\nplotlyjs(bg = RGBA(31/255,36/255,36/255,1.0), ticks=:native); #hide\nnothing #hide","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"and we simulate a coupled spin system with the following parameters:","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"m₀ˢ = 0.1\nm₀ᶠ = 1-m₀ˢ\nR₁ = 1 # 1/s\nR₂ᶠ = 1 / 50e-3 # 1/s\nRₓ = 70; # 1/s\nnothing #hide","category":"page"},{"location":"build_literate/Linear_Approximation/#Linearized-T_2{s,l}","page":"Linear Approximation","title":"Linearized T_2^sl","text":"","category":"section"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"We demonstrate the linear approximation at the example of the Green's function corresponding to the super-Lorentzian lineshape, which we interpolate to improve the perfomance:","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"G = interpolate_greens_function(greens_superlorentzian, 0, 1e-3 / 5e-6);\nnothing #hide","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"The function precompute_R2sl returns another function, R₂ˢˡ(Tʳᶠ, α, B1, T₂ˢ), that interpolates the linearized relaxation rate, as well as functions that describe its derivatives wrt. T_2^s and B_1, respectively:","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"(R₂ˢˡ, ∂R₂ˢˡ∂T₂ˢ, ∂R₂ˢˡ∂B₁) = precompute_R2sl(100e-6, 1e-3, 5e-6, 20e-6, 0.01π, π, 1-eps(), 1+eps(); greens=G);\nnothing #hide","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"The derivatives are not used here and are just assigned for demonstration purposes.","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"In order to replicate Fig. 7, we plot R₂ˢˡ(Tʳᶠ, α, B₁, T₂ˢ) for a varying α and T_textRFT_2^s:","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"α = (0.01:.01:1) * π\nTʳᶠoT₂ˢ = 5:200\n\nTʳᶠoT₂ˢ_m = repeat(reshape(TʳᶠoT₂ˢ, 1, :), length(α), 1)\nα_m = repeat(α, 1, size(TʳᶠoT₂ˢ_m, 2))\n\np = plot(xlabel=\"Tʳᶠ/T₂ˢ\", ylabel=\"α/π\", colorbar_title=\"T₂ˢˡ/T₂ˢ\")\ncontour!(p, TʳᶠoT₂ˢ, α ./ π, 1 ./ R₂ˢˡ.(TʳᶠoT₂ˢ_m, α_m, 1, 1), fill = true)\nMain.HTMLPlot(p) #hide","category":"page"},{"location":"build_literate/Linear_Approximation/#Single-RF-Pulse","page":"Linear Approximation","title":"Single RF Pulse","text":"","category":"section"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"To replicate Fig. 8a, we simulate and plot the dynamics of a coupled spin system during a single π-pulse, starting from thermal equilibrium.","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"Tʳᶠ = 100e-6 # s\nT₂ˢ = 10e-6 # μs\nm0_5D = [0,0,m₀ᶠ,m₀ˢ,1]\nmfun(p, t; idxs=nothing) = typeof(idxs) <: Number ? 0 : m0_5D; # intialize history function, here with the ability to just call a single index\nnothing #hide","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"The full generalized Bloch model is solved by","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"param = (π/Tʳᶠ, 1, 0, m₀ˢ, R₁, R₂ᶠ, T₂ˢ, Rₓ, G)\nprob = DDEProblem(apply_hamiltonian_gbloch!, m0_5D, mfun, (0.0, Tʳᶠ), param)\nsol_pi_full = solve(prob);\nnothing #hide","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"and we evaluate the interpolated solution at the following time points:","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"t = (0:.01:1) * Tʳᶠ # s\nMpi_full = zeros(length(t),4)\nfor i in eachindex(t)\n    Mpi_full[i,:] = sol_pi_full(t[i])[1:4]\nend","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"Further, we calculate the linear approximation, which is simulated in a 6D-space as it explicitly models x^s:","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"m0_6D = [0,0,m₀ᶠ,0,m₀ˢ,1]\n\nMpi_appx = similar(Mpi_full)\nfor i in eachindex(t)\n    H = exp(hamiltonian_linear(π/Tʳᶠ, 1, 0, t[i], m₀ˢ, R₁, R₂ᶠ, Rₓ, R₂ˢˡ(Tʳᶠ, π, 1, T₂ˢ)))\n    Mpi_appx[i,:] = (H * m0_6D)[[1:3;5]]\nend","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"and plot the original generalized Bloch model and its linear approximation for comparison:","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"p = plot(xlabel=\"t [s]\", ylabel=\"m/m₀\")\nplot!(p, t, Mpi_full[:,1] / m₀ᶠ, label=\"xᶠ/m₀ᶠ original model\")\nplot!(p, t, Mpi_appx[:,1] / m₀ᶠ, label=\"xᶠ/m₀ᶠ linear approximation\")\nplot!(p, t, Mpi_full[:,3] / m₀ᶠ, label=\"zᶠ/m₀ᶠ original model\")\nplot!(p, t, Mpi_appx[:,3] / m₀ᶠ, label=\"zᶠ/m₀ᶠ linear approximation\")\nplot!(p, t, Mpi_full[:,4] / m₀ˢ, label=\"zˢ/m₀ˢ original model\")\nplot!(p, t, Mpi_appx[:,4] / m₀ˢ, label=\"zˢ/m₀ˢ linear approximation\")\nMain.HTMLPlot(p) #hide","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"We observe slight deviations of zˢ during the pulse, but a virtually perfect match at the end of the RF pulse.","category":"page"},{"location":"build_literate/Linear_Approximation/#RF-Pulses-with-Different-Flip-Angles","page":"Linear Approximation","title":"RF Pulses with Different Flip Angles","text":"","category":"section"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"To replicate Fig. 8b, we simulate the spin dynamics during multiple RF pulses with different flip angles α, each simulation starting from thermal equilibrium, and analyze the magnetization at the end of each pulse:","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"α = (.01:.01:1) * π\n\nM_full = zeros(length(α), 4)\nM_appx = similar(M_full)\nfor i in eachindex(α)\n    param = (α[i]/Tʳᶠ, 1, 0, m₀ˢ, R₁, R₂ᶠ, T₂ˢ, Rₓ, G)\n    prob = DDEProblem(apply_hamiltonian_gbloch!, m0_5D, mfun, (0.0, Tʳᶠ), param)\n    M_full[i,:] = solve(prob)[end][1:4]\n\n    u = exp(hamiltonian_linear(α[i]/Tʳᶠ, 1, 0, Tʳᶠ, m₀ˢ, R₁, R₂ᶠ, Rₓ, R₂ˢˡ(Tʳᶠ, α[i], 1, T₂ˢ))) * m0_6D\n    M_appx[i,:] = u[[1:3;5]]\nend\n\np = plot(xlabel=\"α/π\", ylabel=\"m/m₀\")\nplot!(p, α/π, M_appx[:,1] / m₀ᶠ, label=\"xᶠ/m₀ˢ original model\")\nplot!(p, α/π, M_full[:,1] / m₀ᶠ, label=\"xᶠ/m₀ˢ linear approximation\")\nplot!(p, α/π, M_appx[:,3] / m₀ᶠ, label=\"zᶠ/m₀ˢ original model\")\nplot!(p, α/π, M_full[:,3] / m₀ᶠ, label=\"zᶠ/m₀ˢ linear approximation\")\nplot!(p, α/π, M_appx[:,4] / m₀ˢ, label=\"zˢ/m₀ˢ original model\")\nplot!(p, α/π, M_full[:,4] / m₀ˢ, label=\"zˢ/m₀ˢ linear approximation\")\nMain.HTMLPlot(p) #hide","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"Visually, the linear approximation matches the full simulation well. The normalized root-mean-squared error of the linear approximation for x^f is","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"norm(M_appx[:,1] .- M_full[:,1]) / norm(M_full[:,1])","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"for z^f it is","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"norm(M_appx[:,3] .- M_full[:,3]) / norm(M_full[:,3])","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"and for z^s it is","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"norm(M_appx[:,4] .- M_full[:,4]) / norm(M_full[:,4])","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"which confirms the good concordance.","category":"page"},{"location":"build_literate/Linear_Approximation/#Benchmark","page":"Linear Approximation","title":"Benchmark","text":"","category":"section"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"We analyze the execution time for solving the full integro-differential equation:","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"param = (α[end]/Tʳᶠ, 1, 0, m₀ˢ, R₁, R₂ᶠ, T₂ˢ, Rₓ, G)\nprob = DDEProblem(apply_hamiltonian_gbloch!, m0_5D, mfun, (0.0, Tʳᶠ), param)\n@benchmark solve($prob)","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"The $ symbol interpolates the variable, which improves the accuracy of the timing measurement. We can compare this time to the time it takes to calculate the linear approximation, including the time it takes to evaluate the interpolated R₂ˢˡ:","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"@benchmark exp(hamiltonian_linear($(α[end]/Tʳᶠ), 1, 0, $Tʳᶠ, $m₀ˢ, $R₁, $R₂ᶠ, $Rₓ, R₂ˢˡ($Tʳᶠ, $α[end], 1, $T₂ˢ))) * $m0_6D","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"We can see that linear approximation is about 4 orders of magnitude faster compared to the full model.","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"","category":"page"},{"location":"build_literate/Linear_Approximation/","page":"Linear Approximation","title":"Linear Approximation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"build_literate/tutorial/","page":"Quick Start Tutorial","title":"Quick Start Tutorial","text":"EditURL = \"https://github.com/JakobAsslaender/MRIgeneralizedBloch.jl/blob/master/docs/src/tutorial.jl\"","category":"page"},{"location":"build_literate/tutorial/","page":"Quick Start Tutorial","title":"Quick Start Tutorial","text":"(Image: )","category":"page"},{"location":"build_literate/tutorial/#Quick-Start-Tutorial","page":"Quick Start Tutorial","title":"Quick Start Tutorial","text":"","category":"section"},{"location":"build_literate/tutorial/","page":"Quick Start Tutorial","title":"Quick Start Tutorial","text":"The core of generalized Bloch model is implemented in the function apply_hamiltonian_gbloch!(∂m∂t, m, mfun, p, t), which calculates the derivative ∂m/∂t for a given magnetization vector m and stores it in-place in the the variable ∂m∂t. The function interface is written in a way that we can directly feed it into a differential equation solver of the DifferentialEquations.jl package.","category":"page"},{"location":"build_literate/tutorial/","page":"Quick Start Tutorial","title":"Quick Start Tutorial","text":"For this example, we need the following packages:","category":"page"},{"location":"build_literate/tutorial/","page":"Quick Start Tutorial","title":"Quick Start Tutorial","text":"using MRIgeneralizedBloch\nusing DifferentialEquations\nusing Plots\nplotlyjs(bg = RGBA(31/255,36/255,36/255,1.0), ticks=:native); #hide\nnothing #hide","category":"page"},{"location":"build_literate/tutorial/","page":"Quick Start Tutorial","title":"Quick Start Tutorial","text":"We simulate the dynamics of a coupled spin system with the following parameters:","category":"page"},{"location":"build_literate/tutorial/","page":"Quick Start Tutorial","title":"Quick Start Tutorial","text":"m0s = 0.15\nR1 = 1 # 1/s\nR2f = 15 # 1/s\nT2s = 10e-6 # s\nRx = 30; # 1/s\nnothing #hide","category":"page"},{"location":"build_literate/tutorial/","page":"Quick Start Tutorial","title":"Quick Start Tutorial","text":"and the thermal equilibrium of the magnetization m = [xf; yf; zf; zs; 1]:","category":"page"},{"location":"build_literate/tutorial/","page":"Quick Start Tutorial","title":"Quick Start Tutorial","text":"m0 = [0; 0; 1-m0s; m0s; 1];\nnothing #hide","category":"page"},{"location":"build_literate/tutorial/","page":"Quick Start Tutorial","title":"Quick Start Tutorial","text":"during a rectangular RF-pulse with the flip angle and pulse duration","category":"page"},{"location":"build_literate/tutorial/","page":"Quick Start Tutorial","title":"Quick Start Tutorial","text":"α = π\nTRF = 100e-6; # s\nnothing #hide","category":"page"},{"location":"build_literate/tutorial/","page":"Quick Start Tutorial","title":"Quick Start Tutorial","text":"Further, we assume a perfectly calibrated, on-resonant RF-pulse:","category":"page"},{"location":"build_literate/tutorial/","page":"Quick Start Tutorial","title":"Quick Start Tutorial","text":"B1 = 1\nω0 = 0; # rad/s\nnothing #hide","category":"page"},{"location":"build_literate/tutorial/","page":"Quick Start Tutorial","title":"Quick Start Tutorial","text":"as well as a super-Lorentzian lineshape. We interpolate the corresponding Green's function to improve performance:","category":"page"},{"location":"build_literate/tutorial/","page":"Quick Start Tutorial","title":"Quick Start Tutorial","text":"G = interpolate_greens_function(greens_superlorentzian, 0, TRF / T2s);\nnothing #hide","category":"page"},{"location":"build_literate/tutorial/","page":"Quick Start Tutorial","title":"Quick Start Tutorial","text":"The generalized Bloch model is a so-called integro-differential equation where the derivative mt at the time t_1 does not just depend on m(t_1), but on m(t) for t in 0 t_1. This is solved with a delay differential equation (DDE) solver that stores an interpolated history function mfun(p, t), which we use in the apply_hamiltonian_gbloch! function to evaluate the integral. This history function has to be initialized with mfun(p, 0) = m0. Here, we use a slightly more complicated initialization that allows us to index the history function in apply_hamiltonian_gbloch!, which improves performance:","category":"page"},{"location":"build_literate/tutorial/","page":"Quick Start Tutorial","title":"Quick Start Tutorial","text":"mfun(p, t; idxs=nothing) = typeof(idxs) <: Number ? m0[idxs] : m0;\nnothing #hide","category":"page"},{"location":"build_literate/tutorial/","page":"Quick Start Tutorial","title":"Quick Start Tutorial","text":"With this, we are ready to formulate and solve the differential equation:","category":"page"},{"location":"build_literate/tutorial/","page":"Quick Start Tutorial","title":"Quick Start Tutorial","text":"param = (α/TRF, B1, ω0, m0s, R1, R2f, T2s, Rx, G) # defined by apply_hamiltonian_gbloch!\nprob = DDEProblem(apply_hamiltonian_gbloch!, m0, mfun, (0, TRF), param)\nsol = solve(prob)","category":"page"},{"location":"build_literate/tutorial/","page":"Quick Start Tutorial","title":"Quick Start Tutorial","text":"The plot function is implemented for such solution objects and we can plot the solution simply with","category":"page"},{"location":"build_literate/tutorial/","page":"Quick Start Tutorial","title":"Quick Start Tutorial","text":"p = plot(sol, labels=[\"xᶠ\" \"yᶠ\" \"zᶠ\" \"zˢ\" \"1\"], xlabel=\"t [s]\", ylabel=\"m(t)\")\nMain.HTMLPlot(p) #hide","category":"page"},{"location":"build_literate/tutorial/","page":"Quick Start Tutorial","title":"Quick Start Tutorial","text":"More details on the interface, including the linear approximation of the generalized Bloch model can found in the following scripts that replicate all simulations, data analyses, and figures of the generalized Bloch paper.","category":"page"},{"location":"build_literate/tutorial/","page":"Quick Start Tutorial","title":"Quick Start Tutorial","text":"","category":"page"},{"location":"build_literate/tutorial/","page":"Quick Start Tutorial","title":"Quick Start Tutorial","text":"This page was generated using Literate.jl.","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"EditURL = \"https://github.com/JakobAsslaender/MRIgeneralizedBloch.jl/blob/master/docs/src/Analyze_NMR_IR_Data.jl\"","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"(Image: )","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/#Inversion-Recovery-Experiments","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"","category":"section"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"The following code replicates the NMR data analysis in Figs. 4-6 and complements the paper with additional analyses that are not shown in the paper in the interest of brevity.","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"For this analysis we need the following packages:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"using MRIgeneralizedBloch\nusing DifferentialEquations\nusing LinearAlgebra\nusing LsqFit\nusing Statistics\nimport Pingouin\nusing Printf\nusing Formatting\nusing Plots\nplotlyjs(bg = RGBA(31/255,36/255,36/255,1.0), ticks=:native); #hide\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"The raw data is stored in a separate github repository and the following functions return the URL to the individual files:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"MnCl2_data(TRF_scale) = string(\"https://github.com/JakobAsslaender/MRIgeneralizedBloch_NMRData/blob/main/20210419_1mM_MnCl2/ja_IR_v2%20(\", TRF_scale, \")/1/data.2d?raw=true\")\nBSA_data(TRF_scale)   = string(\"https://github.com/JakobAsslaender/MRIgeneralizedBloch_NMRData/blob/main/20210416_15%25BSA_2ndBatch/ja_IR_v2%20(\", TRF_scale, \")/1/data.2d?raw=true\");\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"which can be loaded with functions implemented in this file:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"include(string(pathof(MRIgeneralizedBloch), \"/../../docs/src/load_NMR_data.jl\"));\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/#MnCl_2-Sample","page":"Inversion Recovery Experiments","title":"MnCl_2 Sample","text":"","category":"section"},{"location":"build_literate/Analyze_NMR_IR_Data/#T_2{*,f}-Estimation","page":"Inversion Recovery Experiments","title":"T_2^*f Estimation","text":"","category":"section"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"We estimate T_2^*f by fitting a mono-exponential decay curve to the FID of the acquisition with T_textRF = 228μs and T_texti = 5s.","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"M = load_Data(MnCl2_data(1))\nM = M[:,1]; # select Tᵢ = 5s\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"The data was measured at the following time points in units of seconds:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"T_dwell = 100e-6 # s\nTE = T_dwell * ((1:length(M)) .+ 7) # s","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Note that the signal is an FID, so the phrase echo time is a bit misleading.","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"The function curve_fit from the LsqFit.jl package is only implemented for real-valued models. To accommodate this, we need to split the data into its real and imaginary part:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"TEreal = [TE;TE]\nMreal = [real(M);imag(M)];\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Here, we are using a simple mono-exponential model with a complex-valued scaling factor p[1] + 1im p[2], the decay time T_2^*f = p[3], and the Larmor frequency p[4]:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"FID_model(t, p) = @. [p[1] * exp(- t[1:end ÷ 2] / p[3]) * cos(p[4] * t[1:end ÷ 2]); p[2] * exp(- t[end ÷ 2 + 1:end] / p[3]) * sin(p[4] * t[end ÷ 2 + 1:end])];\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Fitting this model to the NMR data estimates T_2^*f:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"fit = curve_fit(FID_model, TEreal, Mreal, [1, 1, 0.1, 0])\nT₂star_MnCl2 = fit.param[3] # s","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"seconds and its uncertainty (also in units of seconds)","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"stderror(fit)[3] # s","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Visually, the plot and the data show good agreement:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Mfitted = FID_model(TEreal, fit.param)\nMfitted = Mfitted[1:end÷2] + 1im * Mfitted[end÷2+1:end]\np = plot(xlabel=\"TE [s]\", ylabel=\"|FID(TE)| [a.u.]\")\nplot!(p, TE, abs.(M), label=\"data\")\nplot!(p, TE, abs.(Mfitted), label=@sprintf(\"fit with T₂* = %2.3f ms\", 1e3 * T₂star_MnCl2))\nMain.HTMLPlot(p) #hide","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"The relative residual norm of the fit, i.e. textresidual_2M_2 is","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"norm(fit.resid) / norm(M)","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Despite its small ell_2-norm, the Shapiro-Wilk test indicates that the residual is not Gaussian or normal distributed at a significance level of α=0.05","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Pingouin.normality(fit.resid, α=0.05)","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"We note that mono-exponential T_2^* decays assume a Lorentzian distributed magnetic field, which is in general an assumption rather than a well-founded theory.","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/#Mono-Exponential-IR-Model","page":"Inversion Recovery Experiments","title":"Mono-Exponential IR Model","text":"","category":"section"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"We performed several experiments in which we inverted the thermal equilibrium magnetization with rectangular π-pulses with the following pulse durations (in seconds):","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Tʳᶠmin = 22.8e-6 # s - shortest Tʳᶠ possible on the NMR\nTRF_scale = [1;2;5:5:40] # scaling factor\nTʳᶠ = TRF_scale * Tʳᶠmin # s","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"and acquired inversion recovery data at exponentially spaced inversion times (in seconds):","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Tᵢ = exp.(range(log(3e-3), log(5), length=20)) # s\nTᵢ .+= 12 * Tʳᶠmin + (13 * 15.065 - 5) * 1e-6 # s - correction factors","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"We calculate the Rabi frequencies of the RF pulses and a finer grid of T_texti to plot the IR model:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"ω₁ = π ./ Tʳᶠ # rad/s\nTᵢplot = exp.(range(log(Tᵢ[1]), log(Tᵢ[end]), length=500)); # s\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"After loading and normalizing the data","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"M = zeros(Float64, length(Tᵢ), length(TRF_scale))\nfor i = 1:length(TRF_scale)\n    M[:,i] = load_first_datapoint(MnCl2_data(TRF_scale[i]))\nend\nM ./= maximum(M);\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"we analyze each inversion recovery curve that corresponds to a different T_textRF separately. This allows us to fit a simple mono-exponential model","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"standard_IR_model(t, p) = @. p[1] - p[3] * exp(- t * p[2]);\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"where p[1] is the thermal equilibrium magnetization, p[2] = T_1, and p[1] - p[3] is the magnetization right after the inversion pulse or, equivalently, Minv = p[1] / p[3] - 1 is the inversion efficiency, which is 1 for an ideal π-pulse and smaller otherwise. The parameters are initialized with","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"p0 = [1.0, 1.0, 2.0];\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"and we can loop over T_textRF to perform the fits:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"R₁ = similar(M[1,:])\nMinv = similar(R₁)\nresidual = similar(R₁)\np = plot(xlabel=\"Tᵢ [s]\", ylabel=\"zᶠ(Tʳᶠ, Tᵢ) [a.u.]\")\nfor i = 1:length(TRF_scale)\n    Mi = @view M[:,i]\n\n    fit = curve_fit(standard_IR_model, Tᵢ, Mi, p0)\n\n    R₁[i] = fit.param[2]\n    Minv[i] = fit.param[3] / fit.param[1] - 1\n\n    residual[i] = norm(fit.resid) / norm(Mi)\n\n    scatter!(p, Tᵢ, Mi, label=@sprintf(\"Tʳᶠ = %1.2es - data\", Tʳᶠ[i]), color=i)\n    plot!(p, Tᵢplot, standard_IR_model(Tᵢplot, fit.param), label=@sprintf(\"fit with R₁ = %.3f/s; MInv = %.3f\", R₁[i], Minv[i]), color=i)\nend\nMain.HTMLPlot(p) #hide","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Here, the data measured with different T_textRF are indicated by markers in different colors, and the corresponding fits are the line plots in the same color. The fitted parameters are denoted in the legend. In the paper, we highlight the estimated inversion efficiency and the relaxation rate of the dataset acquired with T_textRF=228μs:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Minv[1]","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"R₁[1] # 1/s","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"and of the dataset acquired with T_textRF=912μs:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Minv[end]","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"R₁[end] # 1/s","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"The mean value of all R₁ estimates is","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"mean(R₁) # 1/s","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"1/s and its standard deviation in units of 1/s is","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"std(R₁) # 1/s","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"The relative residual norm of the fits is on average","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"mean(residual)","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/#Global-IR-Fit","page":"Inversion Recovery Experiments","title":"Global IR Fit","text":"","category":"section"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"As an alternative to individual fits to the inversion recovery curves with different T_textRF, we can also perform a global fit that accounts for the T_2^*f decay during the inversion pulse. The model first simulates the T_2^*f decay during the inversion pulse, followed by T_1 recovery:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"function Bloch_IR_model(p, Tʳᶠ, Tᵢ, T2)\n    (m0, m0_inv, R₁) = p\n    R2 = 1 / T2\n\n    M = zeros(Float64, length(Tᵢ), length(Tʳᶠ))\n    for i = 1:length(Tʳᶠ)\n        # simulate inversion pulse\n        ω₁ = π / Tʳᶠ[i]\n        H = [-R2 -ω₁ 0 ;\n              ω₁ -R₁ R₁;\n               0   0 0 ]\n\n        m_inv = m0_inv * (exp(H * Tʳᶠ[i]) * [0,1,1])[2]\n\n        # simulate T1 recovery\n        H = [-R₁ R₁*m0;\n               0     0]\n\n        for j = 1:length(Tᵢ)\n            M[j,i] = m0 * (exp(H .* (Tᵢ[j] - Tʳᶠ[i] / 2)) * [m_inv,1])[1]\n        end\n    end\n    return vec(M)\nend;\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"We use the previously estimated T_2^*f value for the fit:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"fit = curve_fit((x, p) -> Bloch_IR_model(p, Tʳᶠ, Tᵢ, T₂star_MnCl2), 1:length(M), vec(M), [ 1, .8, 1])\n\np = plot(xlabel=\"Tᵢ [s]\", ylabel=\"zᶠ(Tʳᶠ, Tᵢ) [a.u.]\")\nfor i=1:length(Tʳᶠ)\n    scatter!(p, Tᵢ, M[:,i], label=@sprintf(\"Tʳᶠ = %1.2es\", Tʳᶠ[i]), color=i)\n    plot!(p, Tᵢplot, Bloch_IR_model(fit.param, Tʳᶠ[i], Tᵢplot, T₂star_MnCl2), label=@sprintf(\"Tʳᶠ = %1.2es\", Tʳᶠ[i]), color=i)\nend\nMain.HTMLPlot(p) #hide","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"With this global fit, we get a very similar relaxation rate in units of 1/s","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"R₁_MnCl2 = fit.param[3] # 1/s","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"with an uncertainty (also in units of 1/s) of","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"stderror(fit)[3] # 1/s","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Note that the relative residual norm is somewhat increased compared to individual fits to each inversion recovery curve:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"norm(fit.resid) / norm(M)","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/#Bovine-Serum-Albumin-Sample","page":"Inversion Recovery Experiments","title":"Bovine Serum Albumin Sample","text":"","category":"section"},{"location":"build_literate/Analyze_NMR_IR_Data/#T_2{*,f}-Estimation-2","page":"Inversion Recovery Experiments","title":"T_2^*f Estimation","text":"","category":"section"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"We repeat the T_2^*f estimation for the bovine serum albumin (BSA) sample by fitting a mono-exponential decay curve to the FID of the acquisition with T_textRF = 228μs and T_texti = 5s.","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"M = load_Data(BSA_data(1));\nM = M[:,1] # select Tᵢ = 5s\nMreal = [real(M);imag(M)]\n\nfit = curve_fit(FID_model, TEreal, Mreal, [1.0, 1.0, .1, 0.0]);\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"The estimated T_2^*f of the BSA sample is","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"T₂star_BSA = fit.param[3] # s","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"seconds with an uncertainty of","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"stderror(fit)[3] # s","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"seconds.","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Visually, the plot and the data align well for the BSA sample, too:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Mfitted = FID_model(TEreal, fit.param)\nMfitted = Mfitted[1:end÷2] + 1im * Mfitted[end÷2+1:end]\np = plot(xlabel=\"TE [s]\", ylabel=\"|FID(TE)| [a.u.]\")\nplot!(p, TE, abs.(M), label=\"data\")\nplot!(p, TE, abs.(Mfitted), label=@sprintf(\"fit with T₂* = %2.3f ms\", 1e3 * T₂star_BSA))\nMain.HTMLPlot(p) #hide","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"The relative residual norm (textresidual_2M_2) is","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"norm(fit.resid) / norm(M)","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Despite the small residual, the Shapiro-Wilk test indicates that the residual is not normal distributed for this sample either:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Pingouin.normality(fit.resid, α=0.05)","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/#Mono-Exponential-IR-Model-2","page":"Inversion Recovery Experiments","title":"Mono-Exponential IR Model","text":"","category":"section"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"We also fit a mono-exponential model to each inversion recovery curve of the BSA data:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"M = zeros(Float64, length(Tᵢ), length(TRF_scale))\nfor i = 1:length(TRF_scale)\n    M[:,i] = load_first_datapoint(BSA_data(TRF_scale[i]))\nend\nM ./= maximum(M)\n\n\np = plot(xlabel=\"Tᵢ [s]\", ylabel=\"zᶠ(Tʳᶠ, Tᵢ) [a.u.]\")\nfor i = 1:length(TRF_scale)\n    Mi = @view M[:,i]\n\n    fit = curve_fit(standard_IR_model, Tᵢ, Mi, p0)\n\n    R₁[i] = fit.param[2]\n    Minv[i] = fit.param[3] / fit.param[1] - 1\n    residual[i] = norm(fit.resid) / norm(Mi)\n\n    scatter!(p, Tᵢ, Mi, label=@sprintf(\"Tʳᶠ = %1.2es - data\", Tʳᶠ[i]), color=i)\n    plot!(p, Tᵢplot, standard_IR_model(Tᵢplot, fit.param), label=@sprintf(\"fit with R₁ = %.3f/s; MInv = %.3f\", R₁[i], Minv[i]), color=i)\nend\nMain.HTMLPlot(p) #hide","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Zooming into the early phase of the recovery curve reveals the poor fit quality, in particular for long T_textRF. This is also reflected by a substantially larger relative residual norm compared to the MnCl_2 sample:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"mean(residual)","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"In the paper, we highlight the estimated inversion efficiency and the relaxation rate of the dataset acquired with T_textRF=228μs","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Minv[1]","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"R₁[1] # 1/s","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"and of the dataset acquired with T_textRF=912μs","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Minv[end]","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"R₁[end] # 1/s","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"The mean value of all R₁ estimates is","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"mean(R₁) # 1/s","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"and its standard deviation is substantially larger compared to the same fit of the MnCl_2 sample:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"std(R₁) # 1/s","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/#Global-IR-Fit-Generalized-Bloch-Model","page":"Inversion Recovery Experiments","title":"Global IR Fit - Generalized Bloch Model","text":"","category":"section"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"In order to repeat the global fit that includes all T_textRF values, we have to account for the spin dynamics in the semi-solid pool during the RF-pulse. First, we do this with the proposed generalized Bloch model:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"function gBloch_IR_model(p, G, Tʳᶠ, TI, R2f)\n    (m0, m0f_inv, m0s, R₁, T₂ˢ, Rx) = p\n    m0f = 1 - m0s\n    ω₁ = π ./ Tʳᶠ\n\n    m0vec = [0, 0, m0f, m0s, 1]\n    m_fun(p, t; idxs=nothing) = typeof(idxs) <: Number ? 0.0 : zeros(5)\n\n\n    H = [-R₁-m0s*Rx     m0f*Rx R₁*m0f;\n             m0s*Rx -R₁-m0f*Rx R₁*m0s;\n              0          0         0 ]\n\n    M = zeros(Float64, length(TI), length(Tʳᶠ))\n    for i = 1:length(Tʳᶠ)\n        param = (ω₁[i], 1, 0, m0s, R₁, R2f, T₂ˢ, Rx, G)\n        prob = DDEProblem(apply_hamiltonian_gbloch!, m0vec, m_fun, (0.0, Tʳᶠ[i]), param)\n        m = solve(prob)[end]\n\n        for j = 1:length(TI)\n            M[j,i] = m0 * (exp(H .* (TI[j] - Tʳᶠ[i] / 2)) * [m0f_inv * m[3],m[4],1])[1]\n        end\n    end\n    return vec(M)\nend;\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Here, we use assume a super-Lorentzian lineshape, whose Green's function is interpolated to speed up the fitting routine:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"T₂ˢ_min = 5e-6 # s\nG_superLorentzian = interpolate_greens_function(greens_superlorentzian, 0, maximum(Tʳᶠ)/T₂ˢ_min);\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"The fit is initialized with p0 = [m0, m0f_inv, m0_s, R₁, T2_s, Rx] and we set some reasonable bounds to the fitted parameters:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"p0   = [  1, 0.932,  0.1,   1, 10e-6, 50]\npmin = [  0, 0.100,   .0, 0.3,  1e-9, 10]\npmax = [Inf,   Inf,  1.0, Inf, 20e-6,1e3]\n\nfit_gBloch = curve_fit((x, p) -> gBloch_IR_model(p, G_superLorentzian, Tʳᶠ, Tᵢ, 1/T₂star_BSA), [], vec(M), p0, lower=pmin, upper=pmax);\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Visually, the plot and the data align well:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"p = plot(xlabel=\"Tᵢ [s]\", ylabel=\"zᶠ(Tʳᶠ, Tᵢ) [a.u.]\")\nfor i=1:length(Tʳᶠ)\n    scatter!(p, Tᵢ, M[:,i], label=@sprintf(\"Tʳᶠ = %1.2es\", Tʳᶠ[i]), color=i)\n    plot!(p, Tᵢplot, gBloch_IR_model(fit_gBloch.param, G_superLorentzian, Tʳᶠ[i], Tᵢplot, 1/T₂star_BSA), label=@sprintf(\"Tʳᶠ = %1.2es\", Tʳᶠ[i]), color=i)\nend\nMain.HTMLPlot(p) #hide","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"which becomes particularly apparent when zooming into the beginning of the inversion recovery curves. Further, the relative residual norm is much smaller compared to the mono-exponential fit:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"norm(fit_gBloch.resid) / norm(M)","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"The estimated parameters are","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"m0 = fit_gBloch.param[1]","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Minv = fit_gBloch.param[2]","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"m0s = fit_gBloch.param[3]","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"R₁ = fit_gBloch.param[4] # 1/s","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"T₂ˢ = 1e6fit_gBloch.param[5] # μs","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Rx = fit_gBloch.param[6] # 1/s","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"with the uncertainties (in the same order)","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"stderror(fit_gBloch)","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/#Global-IR-Fit-Graham's-Single-Frequency-Approximation","page":"Inversion Recovery Experiments","title":"Global IR Fit - Graham's Single Frequency Approximation","text":"","category":"section"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"For comparison, we repeat the same fit with Graham's single frequency approximation:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"function Graham_IR_model(p, Tʳᶠ, TI, R2f)\n    (m0, m0f_inv, m0s, R₁, T₂ˢ, Rx) = p\n    m0f = 1 - m0s\n    ω₁ = π ./ Tʳᶠ\n\n    m0vec = [0, 0, m0f, m0s, 1]\n\n    H = [-R₁-m0s*Rx     m0f*Rx R₁*m0f;\n             m0s*Rx -R₁-m0f*Rx R₁*m0s;\n              0          0         0 ]\n\n    M = zeros(Float64, length(TI), length(Tʳᶠ))\n    for i = 1:length(Tʳᶠ)\n        param = (ω₁[i], 1, 0, Tʳᶠ[i], m0s, R₁, R2f, T₂ˢ, Rx)\n        prob = ODEProblem(apply_hamiltonian_graham_superlorentzian!, m0vec, (0.0, Tʳᶠ[i]), param)\n        m = solve(prob)[end]\n\n        for j = 1:length(TI)\n            M[j,i] = m0 * (exp(H .* (TI[j] - Tʳᶠ[i] / 2)) * [m0f_inv * m[3],m[4],1])[1]\n        end\n    end\n    return vec(M)\nend\n\nfit_Graham = curve_fit((x, p) -> Graham_IR_model(p, Tʳᶠ, Tᵢ, 1/T₂star_BSA), [], vec(M), p0, lower=pmin, upper=pmax);\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Visually, the plot and the data align substantially worse:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"p = plot(xlabel=\"Tᵢ [s]\", ylabel=\"zᶠ(Tʳᶠ, Tᵢ) [a.u.]\")\nfor i=1:length(Tʳᶠ)\n    scatter!(p, Tᵢ, M[:,i], label=@sprintf(\"Tʳᶠ = %1.2es\", Tʳᶠ[i]), color=i)\n    plot!(p, Tᵢplot, Graham_IR_model(fit_Graham.param, Tʳᶠ[i], Tᵢplot, 1/T₂star_BSA), label=@sprintf(\"Tʳᶠ = %1.2es\", Tʳᶠ[i]), color=i)\nend\nMain.HTMLPlot(p) #hide","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"which becomes particularly apparent when zooming into the beginning of the inversion recovery curves. Further, the relative residual norm is much larger compared to the generalized Bloch fit:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"norm(fit_Graham.resid) / norm(M)","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"The estimated parameters are","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"m0 = fit_Graham.param[1]","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Minv = fit_Graham.param[2]","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"m0s = fit_Graham.param[3]","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"R₁ = fit_Graham.param[4] # 1/s","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"T₂ˢ = 1e6fit_Graham.param[5] # μs","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Rx = fit_Graham.param[6] # 1/s","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"with the uncertainties (in the same order)","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"stderror(fit_Graham)","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/#Global-IR-Fit-Sled's-Model","page":"Inversion Recovery Experiments","title":"Global IR Fit - Sled's Model","text":"","category":"section"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"We also performed the fit with Sled's model:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"function Sled_IR_model(p, G, Tʳᶠ, TI, R2f)\n    (m0, m0f_inv, m0s, R₁, T₂ˢ, Rx) = p\n    m0f = 1 - m0s\n    ω₁ = π ./ Tʳᶠ\n\n    m0vec = [0, 0, m0f, m0s, 1]\n\n    H = [-R₁-m0s*Rx     m0f*Rx R₁*m0f;\n             m0s*Rx -R₁-m0f*Rx R₁*m0s;\n              0          0         0 ]\n\n    M = zeros(Float64, length(TI), length(Tʳᶠ))\n    for i = 1:length(Tʳᶠ)\n        param = (ω₁[i], 1, 0, m0s, R₁, R2f, T₂ˢ, Rx, G)\n        prob = ODEProblem(apply_hamiltonian_sled!, m0vec, (0.0, Tʳᶠ[i]), param)\n        m = solve(prob)[end]\n\n        for j = 1:length(TI)\n            M[j,i] = m0 * (exp(H .* (TI[j] - Tʳᶠ[i] / 2)) * [m0f_inv * m[3],m[4],1])[1]\n        end\n    end\n    return vec(M)\nend\n\nfit_Sled = curve_fit((x, p) -> Sled_IR_model(p, G_superLorentzian, Tʳᶠ, Tᵢ, 1/T₂star_BSA), [], vec(M), p0, lower=pmin, upper=pmax);\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Visually, the plot and the data do not align well either:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"p = plot(xlabel=\"Tᵢ [s]\", ylabel=\"zᶠ(Tʳᶠ, Tᵢ) [a.u.]\")\nfor i=1:length(Tʳᶠ)\n    scatter!(p, Tᵢ, M[:,i], label=@sprintf(\"Tʳᶠ = %1.2es\", Tʳᶠ[i]), color=i)\n    plot!(p, Tᵢplot, Sled_IR_model(fit_Sled.param, G_superLorentzian, Tʳᶠ[i], Tᵢplot, 1/T₂star_BSA), label=@sprintf(\"Tʳᶠ = %1.2es\", Tʳᶠ[i]), color=i)\nend\nMain.HTMLPlot(p) #hide","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"which becomes particularly apparent when zooming into the beginning of the inversion recovery curves. Further, the relative residual norm is also large compared to the generalized Bloch fit:","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"norm(fit_Sled.resid) / norm(M)","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"The estimated parameters are","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"m0 = fit_Sled.param[1]","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Minv = fit_Sled.param[2]","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"m0s = fit_Sled.param[3]","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"R₁ = fit_Sled.param[4] # 1/s","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"T₂ˢ = 1e6fit_Sled.param[5] # μs","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Rx = fit_Sled.param[6] # 1/s","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"with the uncertainties (in the same order)","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"stderror(fit_Sled)","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/#Analysis-of-the-Residuals","page":"Inversion Recovery Experiments","title":"Analysis of the Residuals","text":"","category":"section"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"In order to visualize how well the three models align with the data at different T_textRF, we calculate the ell_2-norm of the residuals after subtracting the modeled from the measured signal and normalize it by the ell_2-norm of the signal.","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"resid_gBlo = similar(Tʳᶠ)\nresid_Sled = similar(Tʳᶠ)\nresid_Grah = similar(Tʳᶠ)\nfor i=1:length(Tʳᶠ)\n    resid_gBlo[i] = norm(gBloch_IR_model(fit_gBloch.param, G_superLorentzian, Tʳᶠ[i], Tᵢ, 1/T₂star_BSA) .- M[:,i]) / norm(M[:,i])\n    resid_Grah[i] = norm(Graham_IR_model(fit_gBloch.param, Tʳᶠ[i], Tᵢ, 1/T₂star_BSA)                    .- M[:,i]) / norm(M[:,i])\n    resid_Sled[i] = norm(Sled_IR_model(  fit_gBloch.param, G_superLorentzian, Tʳᶠ[i], Tᵢ, 1/T₂star_BSA) .- M[:,i]) / norm(M[:,i])\nend\n\np = plot(xlabel=\"Tʳᶠ [s]\", ylabel=\"relative residual\")\nscatter!(p, Tʳᶠ, resid_gBlo, label=\"generalized Bloch model\")\nscatter!(p, Tʳᶠ, resid_Grah, label=\"Graham's spectral model\")\nscatter!(p, Tʳᶠ, resid_Sled, label=\"Sled's model\")\nMain.HTMLPlot(p) #hide","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"Here, we use the biophysical parameters from the generalized Bloch fit as we consider them to be the best estimates. This approach has the advantage that residuals at long T_textRF are unaffected by the poor fits of Graham's and Sled's models at short T_textRF. To confirm that the residuals from the actual fits are worse, simply replace Graham_IR_model(fit_gBloch.param, ...) by Graham_IR_model(fit_Graham.param, ...) and Sled_IR_model(fit_gBloch.param, ...) by Sled_IR_model(fit_Sled.param, ...) in the notebook version of this documentation. (Image: )","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"","category":"page"},{"location":"build_literate/Analyze_NMR_IR_Data/","page":"Inversion Recovery Experiments","title":"Inversion Recovery Experiments","text":"This page was generated using Literate.jl.","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"EditURL = \"https://github.com/JakobAsslaender/MRIgeneralizedBloch.jl/blob/master/docs/src/Simulation_ContinuousWave.jl\"","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"(Image: )","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/#Continuous-Wave-Simulation","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"","category":"section"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"The following code replicates the continuous wave simulation of Fig. 2 and is slightly more comprehensive in the sense that all discussed models are simulated.","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"For these simulations we need the following packages:","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"using MRIgeneralizedBloch\nusing DifferentialEquations\nusing QuadGK\nusing Plots\nplotlyjs(bg = RGBA(31/255,36/255,36/255,1.0), ticks=:native); #hide\nnothing #hide","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"and we simulate an isolated semi-solid spin pool with the following parameters:","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"R₁ = 1.0 # 1/s\nT₂ˢ = 10e-6 # s\n\nTʳᶠ = 2e-3 # s\nω₁ = 2000π # rad/s\nω₀ = 200π # rad/s\n\nt = range(0, Tʳᶠ, length=1001) # time points for plotting\ntspan = (0.0, Tʳᶠ); # simulation range\nnothing #hide","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"These parameters correspond to Fig. 2b, the parameters for replicating Fig. 2a are ω₁ = 200π and Tʳᶠ = 1s.","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/#Lorentzian-Lineshape","page":"Continuous Wave Simulation","title":"Lorentzian Lineshape","text":"","category":"section"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"In this script, we simulate the three lineshapes separately, starting with the Lorentzian lineshape for which the Bloch model provides a ground truth.","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/#Bloch-Model","page":"Continuous Wave Simulation","title":"Bloch Model","text":"","category":"section"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"We can formulate the Bloch model as","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"partial_t beginpmatrix x  y  z  1 endpmatrix = beginpmatrix\n-R_2  -ω_0  ω_1  0 \nω_0  -R_2  0  0 \n-ω_1  0  -R_1  R_1 \n0  0  0  0\nendpmatrix beginpmatrix x  y  z  1 endpmatrix ","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"where the matrix is the Hamiltonian of the Bloch model. For a constant ω_0 and ω_1, we can evaluate the Bloch model by taking the  matrix exponential of its Hamiltonian:","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"H(ω₁, ω₀, R₂, R₁) = [-R₂  -ω₀  ω₁  0;\n                       ω₀ -R₂   0  0;\n                      -ω₁   0 -R₁ R₁;\n                        0   0   0  0]\n\nz_Bloch = similar(t)\nfor i = 1:length(t)\n    (_, _, z_Bloch[i], _) = exp(H(ω₁, ω₀, 1 / T₂ˢ, R₁) * t[i]) * [0; 0; 1; 1]\nend","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/#Henkelman's-Steady-State-Solution","page":"Continuous Wave Simulation","title":"Henkelman's Steady-State Solution","text":"","category":"section"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"When assuming an isolated semi-solid pool, Eq. (9) in Henkelman, R. Mark, et al. \"Quantitative interpretation of magnetization transfer.\" Magnetic resonance in medicine 29.6 (1993): 759-766 reduces to","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"g_Lorentzian(ω₀) = T₂ˢ / π / (1 + (T₂ˢ * ω₀)^2)\nz_steady_state_Lorentzian = R₁ / (R₁ + π * ω₁^2 * g_Lorentzian(ω₀))","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"where g_Lorentzian(ω₀) is the Lorentzian lineshape.","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/#Graham's-Single-Frequency-Approximation","page":"Continuous Wave Simulation","title":"Graham's Single Frequency Approximation","text":"","category":"section"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"The lineshape is also used to calculate Graham's single frequency approximation, which describes an exponential decay with the RF-induced saturation rate Rʳᶠ:","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"Rʳᶠ = π * ω₁^2 * g_Lorentzian(ω₀)\nz_Graham_Lorentzian = @. (Rʳᶠ * exp(-t * (R₁ + Rʳᶠ)) + R₁) / (R₁ + Rʳᶠ);\nnothing #hide","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/#Sled's-Model","page":"Continuous Wave Simulation","title":"Sled's Model","text":"","category":"section"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"Sled's model is given by the ordinary differential equation (ODE)","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"partial_t z(t) = left(-pi int_0^t G(t-τ) omega_1(τ)^2 dτ right) z(t)  + R_1 (1-z)","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"where G(t-τ) is the Green's function. The Hamiltonian of this ODE is implemented in apply_hamiltonian_sled! and we solve this ODE with the DifferentialEquations.jl package:","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"z₀ = [1.0] # initial z-magnetization\nparam = (ω₁, 1, ω₀, R₁, T₂ˢ, greens_lorentzian) # defined by apply_hamiltonian_sled!\nprob = ODEProblem(apply_hamiltonian_sled!, z₀, tspan, param)\nz_Sled_Lorentzian = solve(prob);\nnothing #hide","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/#Generalized-Bloch-Model","page":"Continuous Wave Simulation","title":"Generalized Bloch Model","text":"","category":"section"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"The generalized Bloch model is an integro-differential equation (IDE) as it depends on z(τ) instead of z(t):","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"partial_t z(t) = - ω_1(t) int_0^t G(tτ) ω_1(τ) z(τ) dτ + R_1 (1 - z(t)) ","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"For off-resonant RF-pulses with ω_1 = ω_x + i ω_y, it is given by","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"partial_t z(t) = - ω_y(t) int_0^t G(tτ) ω_y(τ) z(τ) dτ - ω_x(t) int_0^t G(tτ) ω_x(τ) z(τ) dτ + R_1 (1 - z(t)) ","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"The Hamiltonian of the IDE is implemented in apply_hamiltonian_gbloch! and we can solve this IDE with the delay-differential equation (DDE) solver of the DifferentialEquations.jl package:","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"zfun(p, t) = [1.0] # initialize history function (will be populated with an interpolation by the DDE solver)\n\nparam = (ω₁, 1, ω₀, R₁, T₂ˢ, greens_lorentzian) # defined by apply_hamiltonian_gbloch!\nprob = DDEProblem(apply_hamiltonian_gbloch!, z₀, zfun, tspan, param)\nz_gBloch_Lorentzian = solve(prob);\nnothing #hide","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"Now that we have solved all five models, we can plot the solutions for comparison:","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"p = plot(xlabel=\"t [ms]\", ylabel=\"zˢ(t)\")\nplot!(p, 1e3t, zero(similar(t)) .+ z_steady_state_Lorentzian, label=\"Henkelman's steady-state\")\nplot!(p, 1e3t, z_Graham_Lorentzian, label=\"Graham's model\")\nplot!(p, 1e3t, (hcat(z_Sled_Lorentzian(t).u...)'), label=\"Sled's model\")\nplot!(p, 1e3t, (hcat(z_gBloch_Lorentzian(t).u...)'), label=\"generalized Bloch model\")\nplot!(p, 1e3t, z_Bloch, label=\"Bloch model\")\nMain.HTMLPlot(p) #hide","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"Zooming into the plot, reveals virtually perfect (besides numerical differences) agreement between Bloch and generalized Bloch model and subtle, but existing differences when compared to the other models. Choosing a longer T₂ˢ amplifies these differences.","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/#Gaussian-Lineshape","page":"Continuous Wave Simulation","title":"Gaussian Lineshape","text":"","category":"section"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"We can repeat these simulations (with the exception of the Bloch model) for the Gaussian lineshape:","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"g_Gaussian(ω₀) = T₂ˢ / sqrt(2π) * exp(-(T₂ˢ * ω₀)^2 / 2)\nz_steady_state_Gaussian = R₁ / (R₁ + π * ω₁^2 * g_Gaussian(ω₀))\n\nRʳᶠ = π * ω₁^2 * g_Gaussian(ω₀)\nz_Graham_Gaussian = @. (Rʳᶠ * exp(-t * (R₁ + Rʳᶠ)) + R₁) / (R₁ + Rʳᶠ)\n\nparam = (ω₁, 1, ω₀, R₁, T₂ˢ, greens_gaussian) # defined by apply_hamiltonian_sled!\nprob = ODEProblem(apply_hamiltonian_sled!, z₀, tspan, param)\nz_Sled_Gaussian = solve(prob)\n\nprob = DDEProblem(apply_hamiltonian_gbloch!, z₀, zfun, tspan, param)\nz_gBloch_Gaussian = solve(prob)\n\np = plot(xlabel=\"t [ms]\", ylabel=\"zˢ(t)\")\nplot!(p, 1e3t, zero(similar(t)) .+ z_steady_state_Gaussian, label=\"Henkelman's steady-state\")\nplot!(p, 1e3t, z_Graham_Gaussian, label=\"Graham' model\")\nplot!(p, 1e3t, (hcat(z_Sled_Gaussian(t).u...)'), label=\"Sled's model\")\nplot!(p, 1e3t, (hcat(z_gBloch_Gaussian(t).u...)'), label=\"generalized Bloch model\")\nMain.HTMLPlot(p) #hide","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/#Super-Lorentzian-Lineshape","page":"Continuous Wave Simulation","title":"Super-Lorentzian Lineshape","text":"","category":"section"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"And we can repeat these simulations (with the exception of the Bloch model) for the super-Lorentzian lineshape, which reveals the most pronounced deviations between the models due to the substantially slower decay of the Green's function:","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"g_superLorentzian(ω₀) = sqrt(2 / π) * T₂ˢ * quadgk(ct -> exp(-2 * (T₂ˢ * ω₀ / abs(3 * ct^2 - 1))^2) / abs(3 * ct^2 - 1), 0.0, sqrt(1 / 3), 1)[1]\nz_steady_state_superLorentzian = R₁ / (R₁ + π * ω₁^2 * g_superLorentzian(ω₀))\n\nRʳᶠ = π * ω₁^2 * g_superLorentzian(ω₀)\nz_Graham_superLorentzian = @. (Rʳᶠ * exp(-t * (R₁ + Rʳᶠ)) + R₁) / (R₁ + Rʳᶠ)\n\nG_superLorentzian = interpolate_greens_function(greens_superlorentzian, 0, Tʳᶠ/T₂ˢ)\n\nparam = (ω₁, 1, ω₀, R₁, T₂ˢ, G_superLorentzian)\nprob = ODEProblem(apply_hamiltonian_sled!, z₀, tspan, param)\nz_Sled_superLorentzian = solve(prob)\n\nprob = DDEProblem(apply_hamiltonian_gbloch!, z₀, zfun, tspan, param)\nz_gBloch_superLorentzian = solve(prob)\n\n\np = plot(xlabel=\"t [ms]\", ylabel=\"zˢ(t)\")\nplot!(p, 1e3t, zero(similar(t)) .+ z_steady_state_superLorentzian, label=\"Henkelman's steady-state\")\nplot!(p, 1e3t, z_Graham_superLorentzian, label=\"Graham's model\")\nplot!(p, 1e3t, (hcat(z_Sled_superLorentzian(t).u...)'), label=\"Sled's model\")\nplot!(p, 1e3t, (hcat(z_gBloch_superLorentzian(t).u...)'), label=\"generalized Bloch model\")\nMain.HTMLPlot(p) #hide","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"","category":"page"},{"location":"build_literate/Simulation_ContinuousWave/","page":"Continuous Wave Simulation","title":"Continuous Wave Simulation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"build_literate/Greens_functions/","page":"Green's Functions","title":"Green's Functions","text":"EditURL = \"https://github.com/JakobAsslaender/MRIgeneralizedBloch.jl/blob/master/docs/src/Greens_functions.jl\"","category":"page"},{"location":"build_literate/Greens_functions/","page":"Green's Functions","title":"Green's Functions","text":"(Image: )","category":"page"},{"location":"build_literate/Greens_functions/#Green's-Functions","page":"Green's Functions","title":"Green's Functions","text":"","category":"section"},{"location":"build_literate/Greens_functions/","page":"Green's Functions","title":"Green's Functions","text":"The Green's functions are given by the Fourier transform of the corresponding lineshapes. For a Lorentzian lineshape, the Green's function is","category":"page"},{"location":"build_literate/Greens_functions/","page":"Green's Functions","title":"Green's Functions","text":"\tG(ttau) = exp (-R_2^s (t-tau))  forall  t geq tau","category":"page"},{"location":"build_literate/Greens_functions/","page":"Green's Functions","title":"Green's Functions","text":"for a Gaussian lineshape it is","category":"page"},{"location":"build_literate/Greens_functions/","page":"Green's Functions","title":"Green's Functions","text":"\tG(ttau) = exp(- R_2^s^2 (t-tau)^2  2))","category":"page"},{"location":"build_literate/Greens_functions/","page":"Green's Functions","title":"Green's Functions","text":"and for super-Lorentzian lineshape it is","category":"page"},{"location":"build_literate/Greens_functions/","page":"Green's Functions","title":"Green's Functions","text":"\tG(ttau) = int_0^1 exp left(- R_2^s^2 (t - tau)^2 cdot  frac(3 zeta^2 - 1)^28 right) dzeta","category":"page"},{"location":"build_literate/Greens_functions/","page":"Green's Functions","title":"Green's Functions","text":"As evident from these equations, the Green's functions are merely a function of kappa = R_2^s cdot (t - tau) = (t - tau)  T_2^s, and in this package we implemented the functions as such: greens_lorentzian(κ), greens_gaussian(κ), and greens_superlorentzian(κ). These functions can be used to reproduce Fig. 1 in the generalized Bloch paper:","category":"page"},{"location":"build_literate/Greens_functions/","page":"Green's Functions","title":"Green's Functions","text":"using MRIgeneralizedBloch\nusing Plots\nplotlyjs(bg = RGBA(31/255,36/255,36/255,1.0), ticks=:native); #hide\nnothing #hide","category":"page"},{"location":"build_literate/Greens_functions/","page":"Green's Functions","title":"Green's Functions","text":"T₂ˢ = 10e-6 # s\nt = 0 : 1e-6 : 1e-3\np = plot(yaxis=:log, ylim=(1e-6,1), xlabel=\"(t-τ) [ms]\", ylabel=\"G((t-τ)/T₂ˢ)\")\nplot!(p, 1e3t, greens_lorentzian.(t ./ T₂ˢ), label=\"Lorentzian lineshape\")\nplot!(p, 1e3t, greens_gaussian.(t ./ T₂ˢ), label=\"Gaussian lineshape\")\nplot!(p, 1e3t, greens_superlorentzian.(t ./ T₂ˢ), label=\"super-Lorentzian l.\")\nMain.HTMLPlot(p) #hide","category":"page"},{"location":"build_literate/Greens_functions/","page":"Green's Functions","title":"Green's Functions","text":"","category":"page"},{"location":"build_literate/Greens_functions/","page":"Green's Functions","title":"Green's Functions","text":"This page was generated using Literate.jl.","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"EditURL = \"https://github.com/JakobAsslaender/MRIgeneralizedBloch.jl/blob/master/docs/src/Simulation_Pulse.jl\"","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"(Image: )","category":"page"},{"location":"build_literate/Simulation_Pulse/#RF-Pulse-Simulation","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"","category":"section"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"The following code replicates the RF-pulse simulation of Fig. 3 and plots the z^s-magnetization at the end of respective pulse.","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"For these simulations we need the following packages:","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"using MRIgeneralizedBloch\nusing QuadGK\nusing DifferentialEquations\nusing SpecialFunctions\nusing Plots\nplotlyjs(bg = RGBA(31/255,36/255,36/255,1.0), ticks=:native); #hide\nnothing #hide","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"and we simulate an isolated semi-solid spin pool with the following parameters:","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"R₁ = 1 # 1/s\nT₂ˢ = 10e-6; # s\nnothing #hide","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"Here, we simulate π-pulses with the following parameters:","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"α = π\nTʳᶠ = exp.(range(log(2e-7), log(1e-1), length=100)) # s\nω₁ = α ./ Tʳᶠ # rad/s\nω₀ = 0; # rad/s\nnothing #hide","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"Replace first line with α = π/4 or α = π/2 to simulate the other two rows of Fig. 3.","category":"page"},{"location":"build_literate/Simulation_Pulse/#Lorentzian-Lineshape","page":"RF-Pulse Simulation","title":"Lorentzian Lineshape","text":"","category":"section"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"In this script, we simulate the three lineshapes separately, starting with the Lorentzian lineshape for which the Bloch model provides a ground truth.","category":"page"},{"location":"build_literate/Simulation_Pulse/#Bloch-Model","page":"RF-Pulse Simulation","title":"Bloch Model","text":"","category":"section"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"We can formulate the Bloch model as","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"partial_t beginpmatrix x  y  z  1 endpmatrix = beginpmatrix\n-R_2  -ω_0  ω_1  0 \nω_0  -R_2  0  0 \n-ω_1  0  -R_1  R_1 \n0  0  0  0\nendpmatrix beginpmatrix x  y  z  1 endpmatrix ","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"where the matrix is the Hamiltonian of the Bloch model. For a constant ω_0 and ω_1, we can evaluate the Bloch model by taking the  matrix exponential of its Hamiltonian:","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"H(ω₁, ω₀, R₂, R₁) = [-R₂ -ω₀  ω₁  0;\n                      ω₀ -R₂   0  0;\n                     -ω₁   0 -R₁ R₁;\n                       0   0   0  0]\n\nz_Bloch = similar(Tʳᶠ)\nfor i = 1:length(Tʳᶠ)\n    (_, _, z_Bloch[i], _)  = exp(H(ω₁[i], ω₀, 1 / T₂ˢ, R₁) * Tʳᶠ[i]) * [0; 0; 1; 1]\nend","category":"page"},{"location":"build_literate/Simulation_Pulse/#Graham's-Spectral-Model","page":"RF-Pulse Simulation","title":"Graham's Spectral Model","text":"","category":"section"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"Graham's spectral model is derived by integrating over the lineshape multiplied by the spectral response function of the RF-pulse. This results in the RF-induced saturation rate Rʳᶠ that is used in an exponential model:","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"Rʳᶠ = @. ω₁^2 * T₂ˢ * ((exp(-Tʳᶠ / T₂ˢ) -1) * T₂ˢ + Tʳᶠ) / Tʳᶠ\nz_Graham_spec_Lorentzian = @. (Rʳᶠ * exp(-Tʳᶠ * (R₁ + Rʳᶠ)) + R₁) / (R₁ + Rʳᶠ);\nnothing #hide","category":"page"},{"location":"build_literate/Simulation_Pulse/#Graham's-Single-Frequency-Approximation","page":"RF-Pulse Simulation","title":"Graham's Single Frequency Approximation","text":"","category":"section"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"In the single frequency approximation, Graham assumes that the RF-pulse has only a single frequency, which reduces Rʳᶠ to","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"g_Lorentzian(ω₀) = T₂ˢ / π ./ (1 .+ (T₂ˢ .* ω₀).^2)\nRʳᶠ = @. π * ω₁^2 * g_Lorentzian(ω₀)\nz_Graham_SF_approx_Lorentzian = @. (Rʳᶠ * exp(-Tʳᶠ * (R₁ + Rʳᶠ)) + R₁) / (R₁ + Rʳᶠ);\nnothing #hide","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"where g_Lorentzian(ω₀) denotes the Lorentzian lineshape.","category":"page"},{"location":"build_literate/Simulation_Pulse/#Sled's-Model","page":"RF-Pulse Simulation","title":"Sled's Model","text":"","category":"section"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"Sled's model is given by the ordinary differential equation (ODE)","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"partial_t z(t) = left(-pi int_0^t G(t-τ) omega_1(τ)^2 dτ right) z(t)  + R_1 (1-z)","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"where G(t-τ) is the Green's function. The Hamiltonian of this ODE is implemented in apply_hamiltonian_sled! and the ODE can be solved with the DifferentialEquations.jl package:","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"z₀ = [1] # initial z-magnetization\nz_Sled_Lorentzian = similar(Tʳᶠ)\nfor i = 1:length(Tʳᶠ)\n    param = (ω₁[i], 1, ω₀, R₁, T₂ˢ, greens_lorentzian)\n    prob = ODEProblem(apply_hamiltonian_sled!, z₀, (0, Tʳᶠ[i]), param)\n    z_Sled_Lorentzian[i] = solve(prob)[end][1]\nend","category":"page"},{"location":"build_literate/Simulation_Pulse/#Generalized-Bloch-Model","page":"RF-Pulse Simulation","title":"Generalized Bloch Model","text":"","category":"section"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"The generalized Bloch model is given by the integro-differential equation (IDE)","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"partial_t z(t) = - ω_1(t) int_0^t G(tτ) ω_1(τ) z(τ) dτ + R_1 (1 - z(t)) ","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"or by","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"partial_t z(t) = - ω_y(t) int_0^t G(tτ) ω_y(τ) z(τ) dτ - ω_x(t) int_0^t G(tτ) ω_x(τ) z(τ) dτ + R_1 (1 - z(t)) ","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"for off-resonant RF-pulses with ω_1 = ω_x + i ω_y. The Hamiltonian of the IDE is implemented in apply_hamiltonian_gbloch! and we can solve this IDE with the delay-differential equation (DDE) solver of the DifferentialEquations.jl package:","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"z_fun(p, t) = [1.0]; # initialize history function (will be populated with an interpolation by the DDE solver)\n\nz_gBloch_Lorentzian = similar(Tʳᶠ)\nfor i = 1:length(Tʳᶠ)\n    param = (ω₁[i], 1, ω₀, R₁, T₂ˢ, greens_lorentzian)\n    prob = DDEProblem(apply_hamiltonian_gbloch!, z₀, z_fun, (0, Tʳᶠ[i]), param)\n    z_gBloch_Lorentzian[i] = solve(prob)[end][1]\nend","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"Now we have solved all five models and can plot the solutions for comparison:","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"p = plot(xaxis=:log, legend=:bottomright, xlabel=\"Tʳᶠ [s]\", ylabel=\"zˢ(Tʳᶠ)\")\nplot!(p, Tʳᶠ, z_gBloch_Lorentzian, label=\"generalized Bloch model\")\nplot!(p, Tʳᶠ, Tʳᶠ .* 0 .+ cos(α), label=\"cos(α)\")\nplot!(p, Tʳᶠ, z_Sled_Lorentzian, label=\"Sled's model\")\nplot!(p, Tʳᶠ, z_Graham_spec_Lorentzian, label=\"Graham's spectral model\")\nplot!(p, Tʳᶠ, z_Graham_SF_approx_Lorentzian, label=\"Graham's single frequency approximation\")\nplot!(p, Tʳᶠ, z_Bloch, label=\"Bloch model\")\nMain.HTMLPlot(p) #hide","category":"page"},{"location":"build_literate/Simulation_Pulse/#Gaussian-Lineshape","page":"RF-Pulse Simulation","title":"Gaussian Lineshape","text":"","category":"section"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"We can repeat these simulations (with the exception of the Bloch model) for the Gaussian lineshape:","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"Rʳᶠ = @. ω₁^2 * T₂ˢ * (2 * T₂ˢ * (exp(-(Tʳᶠ/T₂ˢ)^2/2)-1) + sqrt(2π) * Tʳᶠ * erf(Tʳᶠ/T₂ˢ/sqrt(2))) / (2 * Tʳᶠ)\nz_Graham_spec_Gaussian = @. (Rʳᶠ * exp(-Tʳᶠ * (R₁ + Rʳᶠ)) + R₁) / (R₁ + Rʳᶠ)\n\ng_Gaussian(ω₀) = T₂ˢ / sqrt(2π) * exp(-(T₂ˢ * ω₀)^2 / 2) # lineshape\nRʳᶠ = @. π * ω₁^2 * g_Gaussian(ω₀)\nz_Graham_SF_approx_Gaussian = @. (Rʳᶠ * exp(-Tʳᶠ * (R₁ + Rʳᶠ)) + R₁) / (R₁ + Rʳᶠ)\n\nz_Sled_Gaussian = similar(Tʳᶠ)\nfor i = 1:length(Tʳᶠ)\n    param = (ω₁[i], 1, ω₀, R₁, T₂ˢ, greens_gaussian)\n    prob = ODEProblem(apply_hamiltonian_sled!, z₀, (0, Tʳᶠ[i]), param)\n    z_Sled_Gaussian[i] = solve(prob)[end][1]\nend\n\nz_gBloch_Gaussian = similar(Tʳᶠ)\nfor i = 1:length(Tʳᶠ)\n    param = (ω₁[i], 1, ω₀, R₁, T₂ˢ, greens_gaussian)\n    prob = DDEProblem(apply_hamiltonian_gbloch!, z₀, z_fun, (0, Tʳᶠ[i]), param)\n    z_gBloch_Gaussian[i] = solve(prob)[end][1]\nend\n\np = plot(xaxis=:log, legend=:bottomright, xlabel=\"Tʳᶠ [s]\", ylabel=\"zˢ(Tʳᶠ)\")\nplot!(p, Tʳᶠ, z_gBloch_Gaussian, label=\"generalized Bloch model\")\nplot!(p, Tʳᶠ, Tʳᶠ .* 0 .+ cos(α), label=\"cos(α)\")\nplot!(p, Tʳᶠ, z_Sled_Gaussian, label=\"Sled's model\")\nplot!(p, Tʳᶠ, z_Graham_spec_Gaussian, label=\"Graham's spectral model\")\nplot!(p, Tʳᶠ, z_Graham_SF_approx_Gaussian, label=\"Graham's single frequency approximation\")\nMain.HTMLPlot(p) #hide","category":"page"},{"location":"build_literate/Simulation_Pulse/#Super-Lorentzian-Lineshape","page":"RF-Pulse Simulation","title":"Super-Lorentzian Lineshape","text":"","category":"section"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"Further, we can repeat these simulations for the super-Lorentzian lineshape with the exception of Graham's single frequency approximation, as the super-Lorentzian lineshape diverges at ω_0  0.","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"G_superLorentzian = interpolate_greens_function(greens_superlorentzian, 0, maximum(Tʳᶠ)/T₂ˢ)\n\nf_PSD(τ) = quadgk(ct -> (4 / τ / abs(1 - 3 * ct^2) * (exp(- τ^2 / 8 * (1 - 3 * ct^2)^2) - 1) + sqrt(2π) * erf(τ / 2 / sqrt(2) * abs(1 - 3 * ct^2))) / abs(1 - 3 * ct^2), 0.0, 1.0)[1]\nRʳᶠ = @. f_PSD(Tʳᶠ / T₂ˢ) * ω₁^2 * T₂ˢ\nz_Graham_spec_superLorentzian = @. (Rʳᶠ * exp(-Tʳᶠ * (R₁ + Rʳᶠ)) + R₁) / (R₁ + Rʳᶠ)\n\nz_Sled_superLorentzian = similar(Tʳᶠ)\nfor i = 1:length(Tʳᶠ)\n    param = (ω₁[i], 1, ω₀, R₁, T₂ˢ, G_superLorentzian)\n    prob = ODEProblem(apply_hamiltonian_sled!, z₀, (0, Tʳᶠ[i]), param)\n    z_Sled_superLorentzian[i] = solve(prob)[end][1]\nend\n\nz_gBloch_superLorentzian = similar(Tʳᶠ)\nfor i = 1:length(Tʳᶠ)\n    param = (ω₁[i], 1, ω₀, R₁, T₂ˢ, G_superLorentzian)\n    prob = DDEProblem(apply_hamiltonian_gbloch!, z₀, z_fun, (0, Tʳᶠ[i]), param)\n    z_gBloch_superLorentzian[i] = solve(prob)[end][1]\nend\n\np = plot(xaxis=:log, legend=:bottomright, xlabel=\"Tʳᶠ [s]\", ylabel=\"zˢ(Tʳᶠ)\")\nplot!(p, Tʳᶠ, z_gBloch_superLorentzian, label=\"generalized Bloch model\")\nplot!(p, Tʳᶠ, Tʳᶠ .* 0 .+ cos(α), label=\"cos(α)\")\nplot!(p, Tʳᶠ, z_Sled_superLorentzian, label=\"Sled's model\")\nplot!(p, Tʳᶠ, z_Graham_spec_superLorentzian, label=\"Graham's spectral model\")\nMain.HTMLPlot(p) #hide","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"This simulation reveals the most pronounced deviations of the generalized Bloch model from established models due to the slower decay of the super-Lorentzian Green's function.","category":"page"},{"location":"build_literate/Simulation_Pulse/#Error-Analysis","page":"RF-Pulse Simulation","title":"Error Analysis","text":"","category":"section"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"Assuming a super-Lorentzian lineshape, we quantify the deviations of Sled's model from the generalized Bloch model:","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"Tʳᶠᵢ = 1e-3 # s\nω₁ᵢ = α / Tʳᶠᵢ # rad/s\nparam = (ω₁ᵢ, 1, ω₀, R₁, T₂ˢ, G_superLorentzian)\n\nprob = ODEProblem(apply_hamiltonian_sled!, z₀, (0, Tʳᶠᵢ), param)\nz_Sled_superLorentzian_i = solve(prob)[end][1]\n\nprob = DDEProblem(apply_hamiltonian_gbloch!, z₀, z_fun, (0, Tʳᶠᵢ), param)\nz_gBloch_superLorentzian_i = solve(prob)[end][1]\n\nz_Sled_superLorentzian_i - z_gBloch_superLorentzian_i","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"For T_textRF = 1ms, the deviations are small compared to the thermal equilibrium magnetization z^s_0 = 1, but with T_textRF = 01ms, this deviation becomes sizable:","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"Tʳᶠᵢ = 1e-4 # s\nω₁ᵢ = α / Tʳᶠᵢ # rad/s\nparam = (ω₁ᵢ, 1, ω₀, R₁, T₂ˢ, G_superLorentzian)\n\nprob = ODEProblem(apply_hamiltonian_sled!, z₀, (0, Tʳᶠᵢ), param)\nz_Sled_superLorentzian_i = solve(prob)[end][1]\n\nprob = DDEProblem(apply_hamiltonian_gbloch!, z₀, z_fun, (0, Tʳᶠᵢ), param)\nz_gBloch_superLorentzian_i = solve(prob)[end][1]\n\nz_Sled_superLorentzian_i - z_gBloch_superLorentzian_i","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"","category":"page"},{"location":"build_literate/Simulation_Pulse/","page":"RF-Pulse Simulation","title":"RF-Pulse Simulation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = MRIgeneralizedBloch","category":"page"},{"location":"#MRIgeneralizedBloch.jl","page":"Home","title":"MRIgeneralizedBloch.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for the MRIgeneralizedBloch.jl package, which implements the generalized Bloch model for simulating magnetization transfer (MT), as described in our paper. The key innovation of the model is to generalize the original Bloch model to arbitrary lineshapes, such as the super-Lorentzian lineshape which has been shown to describe brain white matter well. This enables a more accurate description of the spin dynamics during short RF-pulses compared to previous MT models. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package allows to simulate the dynamics of an isolated semi-solid spin pool during RF-pulses, as well as the dynamics of a coupled spin system with a free spin pool, for which we use the Bloch model, and a semi-solid pool, which we describe with the generalized Bloch model. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"A bare bone demonstration of the interface can found Quick Start Tutorial. More details on the implementation are provided in the Section Generalized Bloch Paper, which reproduces all simulations, data analyses, and figures of the generalized Bloch paper:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages=[\n        \"build_literate/Greens_functions.md\",\n        \"build_literate/Simulation_ContinuousWave.md\",\n        \"build_literate/Simulation_Pulse.md\",\n        \"build_literate/Analyze_NMR_IR_Data.md\",\n        \"build_literate/Analyze_NMR_PreSat_Data.md\",\n        \"build_literate/Linear_Approximation.md\",\n]\nDepth = 4","category":"page"},{"location":"","page":"Home","title":"Home","text":"The documentation of all exported functions can be found in the API Section. ","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"EditURL = \"https://github.com/JakobAsslaender/MRIgeneralizedBloch.jl/blob/master/docs/src/Analyze_NMR_PreSat_Data.jl\"","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"(Image: )","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/#Continuous-Wave-Saturation-Experiments","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"","category":"section"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"The following code analyzes data from a steady-state experiment similar to the original work of Henkelman et al. In this experiment, the magnetization of the coupled spin system is saturated with off-resonant continuous waves of the exponentially spaced frequencies:","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"Δ = exp.(range(log(0.01e3), log(100e3), length=20)) * 2π # rad/s","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"and the amplitudes:","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"ω1_dB = -60:5:-5 # dB\nω1 = @. 10^(ω1_dB / 20) * π / 2 / 11.4e-6 # rad/s","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"The waves were applied for 7 seconds to ensure a steady state. Thereafter, the magnetization was excited with a π/2-pulse and an FID was acquired. The repetition times was 30s to ensure full recovery to thermal equilibrium.","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"We fit the data with Henkelman's closed form solution to this steady-state problem while assuming a Lorentzian lineshape for the free spin pool, and different lineshapes for the semi-solid spin pool:","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"g_Lorentzian(Δ, T2) = T2 / π / (1 + (T2 * Δ)^2)\ng_Gaussian(Δ, T2) = T2 / sqrt(2π) * exp(-(T2 * Δ)^2 / 2)\ng_superLorentzian(Δ, T2) = T2 * sqrt(2 / π) * quadgk(ct -> exp(- 2 *  (T2 * Δ / (3 * ct^2 - 1))^2) / abs(3 * ct^2 - 1), 0, sqrt(1 / 3), 1)[1];\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"For this data analysis we need the following packages:","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"using MRIgeneralizedBloch\nusing QuadGK\nusing LsqFit\nusing LinearAlgebra\nusing Statistics\nusing Printf\nusing Plots\nplotlyjs(bg=RGBA(31 / 255, 36 / 255, 36 / 255, 1.0), ticks=:native); # hide\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"The raw data is stored in a separate github repository and the following functions return the URL to the individual files:","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"MnCl2_data(ω1_dB) = string(\"https://github.com/JakobAsslaender/MRIgeneralizedBloch_NMRData/blob/main/20210419_1mM_MnCl2/ja_PreSat_v2%20(\", ω1_dB, \")/1/data.2d?raw=true\")\nBSA_data(ω1_dB)   = string(\"https://github.com/JakobAsslaender/MRIgeneralizedBloch_NMRData/blob/main/20210416_15%25BSA_2ndBatch/ja_PreSat_v2%20(\", ω1_dB, \")/1/data.2d?raw=true\");\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"which can be loaded with functions implemented in this file:","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"include(string(pathof(MRIgeneralizedBloch), \"/../../docs/src/load_NMR_data.jl\"));\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"We store the off-resonance frequencies and wave amplitudes in a single matrix for convenience:","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"x = zeros(Float64, length(ω1) * length(Δ), 2)\nx[:,1] = repeat(Δ, length(ω1))\nx[:,2] = vec(repeat(ω1, 1, length(Δ))');\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/#MnCl_2-Sample","page":"Continuous Wave Saturation Experiments","title":"MnCl_2 Sample","text":"","category":"section"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"We load the first data point of each FID:","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"M = zeros(Float64, length(Δ), length(ω1))\nfor i = 1:length(ω1_dB)\n    M[:,i] = load_first_datapoint(MnCl2_data(ω1_dB[i]); set_phase=:abs)\nend\nM ./= maximum(M);\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"In contrast to the inversion-recovery experiment, the phase of the signal was not stable. Therefore, we took the absolute value of the signal by setting the flag set_phase=:abs.","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"The MnCl_2-data can be described with a single compartment model:","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"function single_compartment_model(x, p)\n    (m0, R1, T2) = p\n\n    Δ  = @view x[:,1]\n    ω1 = @view x[:,2]\n\n    Rrf = @. π * ω1^2 * g_Lorentzian(Δ, T2)\n    m = @. m0 * R1 / (R1 + Rrf)\n    return m\nend;\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"(cf. Eqs. (14) and (15) in the paper).","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"As this model is merely a function of the relaxation times T₁ and T₂, we forgo a fitting routine and use the estimates from the Inversion Recovery Experiments instead:","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"R1 = 1.479 # 1/s\nT2 = 0.075 # s\nnothing # hide","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"Visually, this model describes the data well:","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"p = plot(xlabel=\"Δ [rad/s]\", ylabel=\"M / max(M)\", xaxis=:log, legend=:none)\n[scatter!(p, Δ, M[:,i], color=i) for i=1:length(ω1)]\n[plot!(p, Δ, reshape(single_compartment_model(x, [1,R1,T2]), length(Δ), length(ω1))[:,i], color=i) for i=1:length(ω1)]\nMain.HTMLPlot(p) #hide","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/#Bovine-Serum-Albumin-Sample","page":"Continuous Wave Saturation Experiments","title":"Bovine Serum Albumin Sample","text":"","category":"section"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"We acquired the same data for the BSA sample, which we load:","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"for i = 1:length(ω1_dB)\n    M[:,i] = load_first_datapoint(BSA_data(ω1_dB[i]); set_phase=:abs)\nend\nM ./= maximum(M);\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"We model the steady-state magnetization as described by Henkelman et al.:","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"function Henkelman_model(x, p; lineshape=:superLorentzian)\n    (m0, m0s, R1f, R1s, T2f, T2s, Rx) = p\n\n    m0s /= 1 - m0s # switch from m0s + m0f = 1 to m0f = 1 normalization\n\n    Δ  = @view x[:,1]\n    ω1 = @view x[:,2]\n\n    Rrf_f = @. π * ω1^2 * g_Lorentzian(Δ, T2f)\n\n    if lineshape == :Lorentzian\n        Rrf_s = @. π * ω1^2 * g_Lorentzian(Δ, T2s)\n    elseif lineshape == :Gaussian\n        Rrf_s = @. π * ω1^2 * g_Gaussian(Δ, T2s)\n    elseif lineshape == :superLorentzian\n        Rrf_s = @. π * ω1^2 * g_superLorentzian(Δ, T2s)\n    end\n\n    m = @. m0 * (R1s * Rx * m0s + Rrf_s * R1f + R1f * R1s + R1f * Rx) / ((R1f + Rrf_f + Rx * m0s) * (R1s + Rrf_s + Rx) - Rx^2 * m0s)\n    return m\nend;\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"Here, we use a fitting routine to demonstrate the best possible fit with each of the three lineshapes. We define an initialization for the fitting routine p0 = [m0, m0s, R1f, R1s, T2f, T2s, Rx] and set some reasonable bounds:","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"p0   = [  1,0.01,   1,   5,0.052,  1e-5, 40]\npmin = [  0,   0,   0,   0,0.052,  1e-6,  1]\npmax = [Inf,   1, Inf, Inf,0.052, 10e-3,100];\nnothing #hide","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"Note that we fixed T₂ᶠ = 52ms to the value estimated with the Inversion Recovery Experiments as T₂ᶠ is poorly defined by this saturation experiment.","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/#Super-Lorentzian-Lineshape","page":"Continuous Wave Saturation Experiments","title":"Super-Lorentzian Lineshape","text":"","category":"section"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"Fitting the model with a super-Lorentzian lineshape to the data achieves good concordance:","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"fit = curve_fit((x, p) -> Henkelman_model(x, p; lineshape=:superLorentzian), x, vec(M), p0, lower=pmin, upper=pmax)\nfit_std = stderror(fit)\n\np = plot(xlabel=\"Δ [rad/s]\", ylabel=\"M / max(M)\", xaxis=:log, legend=:none)\n[scatter!(p, Δ, M[:,i], color=i) for i=1:length(ω1)]\n[plot!(p, Δ, reshape(Henkelman_model(x, fit.param), length(Δ), length(ω1))[:,i], color=i) for i=1:length(ω1)]\nMain.HTMLPlot(p) #hide","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/#Lorentzian-Lineshape","page":"Continuous Wave Saturation Experiments","title":"Lorentzian Lineshape","text":"","category":"section"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"The Lorentzian lineshape, on the other hand, does not fit the data well:","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"fit = curve_fit((x, p) -> Henkelman_model(x, p; lineshape=:Lorentzian), x, vec(M), p0, lower=pmin, upper=pmax)\nfit_std = stderror(fit)\n\np = plot(xlabel=\"Δ [rad/s]\", ylabel=\"M / max(M)\", xaxis=:log, legend=:none)\n[scatter!(p, Δ, M[:,i], color=i) for i=1:length(ω1)]\n[plot!(p, Δ, reshape(Henkelman_model(x, fit.param), length(Δ), length(ω1))[:,i], color=i) for i=1:length(ω1)]\nMain.HTMLPlot(p) #hide","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/#Gaussian-Lineshape","page":"Continuous Wave Saturation Experiments","title":"Gaussian Lineshape","text":"","category":"section"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"And the Gaussian lineshape does not not fit the data well either:","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"fit = curve_fit((x, p) -> Henkelman_model(x, p; lineshape=:Lorentzian), x, vec(M), p0, lower=pmin, upper=pmax)\nfit_std = stderror(fit)\n\np = plot(xlabel=\"Δ [rad/s]\", ylabel=\"M / max(M)\", xaxis=:log, legend=:none)\n[scatter!(p, Δ, M[:,i], color=i) for i=1:length(ω1)]\n[plot!(p, Δ, reshape(Henkelman_model(x, fit.param), length(Δ), length(ω1))[:,i], color=i) for i=1:length(ω1)]\nMain.HTMLPlot(p) #hide","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"","category":"page"},{"location":"build_literate/Analyze_NMR_PreSat_Data/","page":"Continuous Wave Saturation Experiments","title":"Continuous Wave Saturation Experiments","text":"This page was generated using Literate.jl.","category":"page"}]
}
